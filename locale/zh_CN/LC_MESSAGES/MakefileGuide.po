# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2016, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-17 11:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../MakefileGuide.rst:3
msgid "LLVM Makefile Guide"
msgstr ""

#: ../../MakefileGuide.rst:9
msgid "Introduction"
msgstr ""

#: ../../MakefileGuide.rst:11
msgid ""
"This document provides *usage* information about the LLVM makefile "
"system. While loosely patterned after the BSD makefile system, LLVM has "
"taken a departure from BSD in order to implement additional features "
"needed by LLVM.  Although makefile systems, such as ``automake``, were "
"attempted at one point, it has become clear that the features needed by "
"LLVM and the ``Makefile`` norm are too great to use a more limited tool. "
"Consequently, LLVM requires simply GNU Make 3.79, a widely portable "
"makefile processor. LLVM unabashedly makes heavy use of the features of "
"GNU Make so the dependency on GNU Make is firm. If you're not familiar "
"with ``make``, it is recommended that you read the `GNU Makefile Manual "
"<http://www.gnu.org/software/make/manual/make.html>`_."
msgstr ""

#: ../../MakefileGuide.rst:22
msgid ""
"While this document is rightly part of the `LLVM Programmer's Manual "
"<ProgrammersManual.html>`_, it is treated separately here because of the "
"volume of content and because it is often an early source of bewilderment"
" for new developers."
msgstr ""

#: ../../MakefileGuide.rst:28
msgid "General Concepts"
msgstr ""

#: ../../MakefileGuide.rst:30
msgid ""
"The LLVM Makefile System is the component of LLVM that is responsible for"
" building the software, testing it, generating distributions, checking "
"those distributions, installing and uninstalling, etc. It consists of a "
"several files throughout the source tree. These files and other general "
"concepts are described in this section."
msgstr ""

#: ../../MakefileGuide.rst:37
msgid "Projects"
msgstr ""

#: ../../MakefileGuide.rst:39
msgid ""
"The LLVM Makefile System is quite generous. It not only builds its own "
"software, but it can build yours too. Built into the system is knowledge "
"of the ``llvm/projects`` directory. Any directory under ``projects`` that"
" has both a ``configure`` script and a ``Makefile`` is assumed to be a "
"project that uses the LLVM Makefile system.  Building software that uses "
"LLVM does not require the LLVM Makefile System nor even placement in the "
"``llvm/projects`` directory. However, doing so will allow your project to"
" get up and running quickly by utilizing the built-in features that are "
"used to compile LLVM. LLVM compiles itself using the same features of the"
" makefile system as used for projects."
msgstr ""

#: ../../MakefileGuide.rst:50
msgid "For further details, consult the `Projects <Projects.html>`_ page."
msgstr ""

#: ../../MakefileGuide.rst:53
msgid "Variable Values"
msgstr ""

#: ../../MakefileGuide.rst:55
msgid ""
"To use the makefile system, you simply create a file named ``Makefile`` "
"in your directory and declare values for certain variables.  The "
"variables and values that you select determine what the makefile system "
"will do. These variables enable rules and processing in the makefile "
"system that automatically Do The Right Thing (C)."
msgstr ""

#: ../../MakefileGuide.rst:62
msgid "Including Makefiles"
msgstr ""

#: ../../MakefileGuide.rst:64
msgid ""
"Setting variables alone is not enough. You must include into your "
"Makefile additional files that provide the rules of the LLVM Makefile "
"system. The various files involved are described in the sections that "
"follow."
msgstr ""

#: ../../MakefileGuide.rst:69
msgid "``Makefile``"
msgstr ""

#: ../../MakefileGuide.rst:71
msgid ""
"Each directory to participate in the build needs to have a file named "
"``Makefile``. This is the file first read by ``make``. It has three "
"sections:"
msgstr ""

#: ../../MakefileGuide.rst:75
msgid "Settable Variables --- Required that must be set first."
msgstr ""

#: ../../MakefileGuide.rst:76
msgid "``include $(LEVEL)/Makefile.common`` --- include the LLVM Makefile system."
msgstr ""

#: ../../MakefileGuide.rst:77
msgid "Override Variables --- Override variables set by the LLVM Makefile system."
msgstr ""

#: ../../MakefileGuide.rst:82
msgid "``Makefile.common``"
msgstr ""

#: ../../MakefileGuide.rst:84
msgid ""
"Every project must have a ``Makefile.common`` file at its top source "
"directory. This file serves three purposes:"
msgstr ""

#: ../../MakefileGuide.rst:87
msgid ""
"It includes the project's configuration makefile to obtain values "
"determined by the ``configure`` script. This is done by including the "
"`$(LEVEL)/Makefile.config`_ file."
msgstr ""

#: ../../MakefileGuide.rst:91
msgid ""
"It specifies any other (static) values that are needed throughout the "
"project. Only values that are used in all or a large proportion of the "
"project's directories should be placed here."
msgstr ""

#: ../../MakefileGuide.rst:95
msgid ""
"It includes the standard rules for the LLVM Makefile system, "
"`$(LLVM_SRC_ROOT)/Makefile.rules`_.  This file is the *guts* of the LLVM "
"``Makefile`` system."
msgstr ""

#: ../../MakefileGuide.rst:102
msgid "``Makefile.config``"
msgstr ""

#: ../../MakefileGuide.rst:104
msgid ""
"Every project must have a ``Makefile.config`` at the top of its *build* "
"directory. This file is **generated** by the ``configure`` script from "
"the pattern provided by the ``Makefile.config.in`` file located at the "
"top of the project's *source* directory. The contents of this file depend"
" largely on what configuration items the project uses, however most "
"projects can get what they need by just relying on LLVM's configuration "
"found in ``$(LLVM_OBJ_ROOT)/Makefile.config``."
msgstr ""

#: ../../MakefileGuide.rst:115
msgid "``Makefile.rules``"
msgstr ""

#: ../../MakefileGuide.rst:117
msgid ""
"This file, located at ``$(LLVM_SRC_ROOT)/Makefile.rules`` is the heart of"
" the LLVM Makefile System. It provides all the logic, dependencies, and "
"rules for building the targets supported by the system. What it does "
"largely depends on the values of ``make`` `variables`_ that have been set"
" *before* ``Makefile.rules`` is included."
msgstr ""

#: ../../MakefileGuide.rst:124
msgid "Comments"
msgstr ""

#: ../../MakefileGuide.rst:126
msgid ""
"User ``Makefile``\\s need not have comments in them unless the "
"construction is unusual or it does not strictly follow the rules and "
"patterns of the LLVM makefile system. Makefile comments are invoked with "
"the pound (``#``) character. The ``#`` character and any text following "
"it, to the end of the line, are ignored by ``make``."
msgstr ""

#: ../../MakefileGuide.rst:133
msgid "Tutorial"
msgstr ""

#: ../../MakefileGuide.rst:135
msgid ""
"This section provides some examples of the different kinds of modules you"
" can build with the LLVM makefile system. In general, each directory you "
"provide will build a single object although that object may be composed "
"of additionally compiled components."
msgstr ""

#: ../../MakefileGuide.rst:141
msgid "Libraries"
msgstr ""

#: ../../MakefileGuide.rst:143
msgid ""
"Only a few variable definitions are needed to build a regular library. "
"Normally, the makefile system will build all the software into a single "
"``libname.o`` (pre-linked) object. This means the library is not "
"searchable and that the distinction between compilation units has been "
"dissolved. Optionally, you can ask for a shared library (.so) or archive "
"library (.a) built.  Archive libraries are the default. For example:"
msgstr ""

#: ../../MakefileGuide.rst:156
msgid ""
"says to build a library named ``mylib`` with both a shared library "
"(``mylib.so``) and an archive library (``mylib.a``) version. The contents"
" of all the libraries produced will be the same, they are just "
"constructed differently. Note that you normally do not need to specify "
"the sources involved. The LLVM Makefile system will infer the source "
"files from the contents of the source directory."
msgstr ""

#: ../../MakefileGuide.rst:163
msgid ""
"The ``LOADABLE_MODULE=1`` directive can be used in conjunction with "
"``SHARED_LIBRARY=1`` to indicate that the resulting shared library should"
" be openable with the ``dlopen`` function and searchable with the "
"``dlsym`` function (or your operating system's equivalents). While this "
"isn't strictly necessary on Linux and a few other platforms, it is "
"required on systems like HP-UX and Darwin. You should use "
"``LOADABLE_MODULE`` for any shared library that you intend to be loaded "
"into an tool via the ``-load`` option.  :ref:`Pass documentation "
"<writing-an-llvm-pass-makefile>` has an example of why you might want to "
"do this."
msgstr ""

#: ../../MakefileGuide.rst:174
msgid "Loadable Modules"
msgstr ""

#: ../../MakefileGuide.rst:176
msgid ""
"In some situations, you need to create a loadable module. Loadable "
"modules can be loaded into programs like ``opt`` or ``llc`` to specify "
"additional passes to run or targets to support.  Loadable modules are "
"also useful for debugging a pass or providing a pass with another package"
" if that pass can't be included in LLVM."
msgstr ""

#: ../../MakefileGuide.rst:182
msgid ""
"LLVM provides complete support for building such a module. All you need "
"to do is use the ``LOADABLE_MODULE`` variable in your ``Makefile``. For "
"example, to build a loadable module named ``MyMod`` that uses the LLVM "
"libraries ``LLVMSupport.a`` and ``LLVMSystem.a``, you would specify:"
msgstr ""

#: ../../MakefileGuide.rst:193
msgid "Use of the ``LOADABLE_MODULE`` facility implies several things:"
msgstr ""

#: ../../MakefileGuide.rst:196
msgid ""
"There will be no \"``lib``\" prefix on the module. This differentiates it"
" from"
msgstr ""

#: ../../MakefileGuide.rst:196
msgid "a standard shared library of the same name."
msgstr ""

#: ../../MakefileGuide.rst:198
msgid "The `SHARED_LIBRARY`_ variable is turned on."
msgstr ""

#: ../../MakefileGuide.rst:200
msgid "The `LINK_LIBS_IN_SHARED`_ variable is turned on."
msgstr ""

#: ../../MakefileGuide.rst:202
msgid ""
"A loadable module is loaded by LLVM via the facilities of libtool's "
"libltdl library which is part of ``lib/System`` implementation."
msgstr ""

#: ../../MakefileGuide.rst:206
msgid "Tools"
msgstr ""

#: ../../MakefileGuide.rst:208
msgid ""
"For building executable programs (tools), you must provide the name of "
"the tool and the names of the libraries you wish to link with the tool. "
"For example:"
msgstr ""

#: ../../MakefileGuide.rst:217
msgid ""
"says that we are to build a tool name ``mytool`` and that it requires "
"three libraries: ``mylib``, ``LLVMSupport.a`` and ``LLVMSystem.a``."
msgstr ""

#: ../../MakefileGuide.rst:220
msgid ""
"Note that two different variables are used to indicate which libraries "
"are linked: ``USEDLIBS`` and ``LLVMLIBS``. This distinction is necessary "
"to support projects. ``LLVMLIBS`` refers to the LLVM libraries found in "
"the LLVM object directory. ``USEDLIBS`` refers to the libraries built by "
"your project. In the case of building LLVM tools, ``USEDLIBS`` and "
"``LLVMLIBS`` can be used interchangeably since the \"project\" is LLVM "
"itself and ``USEDLIBS`` refers to the same place as ``LLVMLIBS``."
msgstr ""

#: ../../MakefileGuide.rst:228
msgid ""
"Also note that there are two different ways of specifying a library: with"
" a ``.a`` suffix and without. Without the suffix, the entry refers to the"
" re-linked (.o) file which will include *all* symbols of the library.  "
"This is useful, for example, to include all passes from a library of "
"passes.  If the ``.a`` suffix is used then the library is linked as a "
"searchable library (with the ``-l`` option). In this case, only the "
"symbols that are unresolved *at that point* will be resolved from the "
"library, if they exist. Other (unreferenced) symbols will not be included"
" when the ``.a`` syntax is used. Note that in order to use the ``.a`` "
"suffix, the library in question must have been built with the "
"``BUILD_ARCHIVE`` option set."
msgstr ""

#: ../../MakefileGuide.rst:240
msgid "JIT Tools"
msgstr ""

#: ../../MakefileGuide.rst:242
msgid ""
"Many tools will want to use the JIT features of LLVM.  To do this, you "
"simply specify that you want an execution 'engine', and the makefiles "
"will automatically link in the appropriate JIT for the host or an "
"interpreter if none is available:"
msgstr ""

#: ../../MakefileGuide.rst:253
msgid ""
"Of course, any additional libraries may be listed as other components.  "
"To get a full understanding of how this changes the linker command, it is"
" recommended that you:"
msgstr ""

#: ../../MakefileGuide.rst:263
msgid "Targets Supported"
msgstr ""

#: ../../MakefileGuide.rst:265
msgid ""
"This section describes each of the targets that can be built using the "
"LLVM Makefile system. Any target can be invoked from any directory but "
"not all are applicable to a given directory (e.g. \"check\", \"dist\" and"
" \"install\" will always operate as if invoked from the top level "
"directory)."
msgstr ""

#: ../../MakefileGuide.rst:271
msgid "Target Name"
msgstr ""

#: ../../MakefileGuide.rst:271
msgid "Implied Targets"
msgstr ""

#: ../../MakefileGuide.rst:271
msgid "Target Description"
msgstr ""

#: ../../MakefileGuide.rst:273 ../../MakefileGuide.rst:279
#: ../../MakefileGuide.rst:280 ../../MakefileGuide.rst:282
#: ../../MakefileGuide.rst:283 ../../MakefileGuide.rst:284
msgid "``all``"
msgstr ""

#: ../../MakefileGuide.rst:273 ../../MakefileGuide.rst:274
#: ../../MakefileGuide.rst:275 ../../MakefileGuide.rst:276
#: ../../MakefileGuide.rst:277 ../../MakefileGuide.rst:278
#: ../../MakefileGuide.rst:285 ../../MakefileGuide.rst:286
msgid "\\"
msgstr ""

#: ../../MakefileGuide.rst:273
msgid "Compile the software recursively. Default target."
msgstr ""

#: ../../MakefileGuide.rst:274 ../../MakefileGuide.rst:302
msgid "``all-local``"
msgstr ""

#: ../../MakefileGuide.rst:274
msgid "Compile the software in the local directory only."
msgstr ""

#: ../../MakefileGuide.rst:275 ../../MakefileGuide.rst:308
msgid "``check``"
msgstr ""

#: ../../MakefileGuide.rst:275
msgid ""
"Change to the ``test`` directory in a project and run the test suite "
"there."
msgstr ""

#: ../../MakefileGuide.rst:276 ../../MakefileGuide.rst:322
msgid "``check-local``"
msgstr ""

#: ../../MakefileGuide.rst:276
msgid ""
"Run a local test suite. Generally this is only defined in the  "
"``Makefile`` of the project's ``test`` directory."
msgstr ""

#: ../../MakefileGuide.rst:277 ../../MakefileGuide.rst:281
#: ../../MakefileGuide.rst:332
msgid "``clean``"
msgstr ""

#: ../../MakefileGuide.rst:277
msgid "Remove built objects recursively."
msgstr ""

#: ../../MakefileGuide.rst:278 ../../MakefileGuide.rst:340
msgid "``clean-local``"
msgstr ""

#: ../../MakefileGuide.rst:278
msgid "Remove built objects from the local directory only."
msgstr ""

#: ../../MakefileGuide.rst:279 ../../MakefileGuide.rst:346
msgid "``dist``"
msgstr ""

#: ../../MakefileGuide.rst:279
msgid "Prepare a source distribution tarball."
msgstr ""

#: ../../MakefileGuide.rst:280 ../../MakefileGuide.rst:354
msgid "``dist-check``"
msgstr ""

#: ../../MakefileGuide.rst:280
msgid "Prepare a source distribution tarball and check that it builds."
msgstr ""

#: ../../MakefileGuide.rst:281 ../../MakefileGuide.rst:365
msgid "``dist-clean``"
msgstr ""

#: ../../MakefileGuide.rst:281
msgid "Clean source distribution tarball temporary files."
msgstr ""

#: ../../MakefileGuide.rst:282 ../../MakefileGuide.rst:371
msgid "``install``"
msgstr ""

#: ../../MakefileGuide.rst:282
msgid "Copy built objects to installation directory."
msgstr ""

#: ../../MakefileGuide.rst:283 ../../MakefileGuide.rst:387
msgid "``preconditions``"
msgstr ""

#: ../../MakefileGuide.rst:283
msgid "Check to make sure configuration and makefiles are up to date."
msgstr ""

#: ../../MakefileGuide.rst:284 ../../MakefileGuide.rst:397
msgid "``printvars``"
msgstr ""

#: ../../MakefileGuide.rst:284
msgid "Prints variables defined by the makefile system (for debugging)."
msgstr ""

#: ../../MakefileGuide.rst:285 ../../MakefileGuide.rst:424
msgid "``tags``"
msgstr ""

#: ../../MakefileGuide.rst:285
msgid "Make C and C++ tags files for emacs and vi."
msgstr ""

#: ../../MakefileGuide.rst:286 ../../MakefileGuide.rst:432
msgid "``uninstall``"
msgstr ""

#: ../../MakefileGuide.rst:286
msgid "Remove built objects from installation directory."
msgstr ""

#: ../../MakefileGuide.rst:292
msgid "``all`` (default)"
msgstr ""

#: ../../MakefileGuide.rst:294
msgid ""
"When you invoke ``make`` with no arguments, you are implicitly "
"instructing it to seek the ``all`` target (goal). This target is used for"
" building the software recursively and will do different things in "
"different directories.  For example, in a ``lib`` directory, the ``all`` "
"target will compile source files and generate libraries. But, in a "
"``tools`` directory, it will link libraries and generate executables."
msgstr ""

#: ../../MakefileGuide.rst:304
msgid ""
"This target is the same as `all`_ but it operates only on the current "
"directory instead of recursively."
msgstr ""

#: ../../MakefileGuide.rst:310
msgid ""
"This target can be invoked from anywhere within a project's directories "
"but always invokes the `check-local`_ target in the project's ``test`` "
"directory, if it exists and has a ``Makefile``. A warning is produced "
"otherwise.  If `TESTSUITE`_ is defined on the ``make`` command line, it "
"will be passed down to the invocation of ``make check-local`` in the "
"``test`` directory. The intended usage for this is to assist in running "
"specific suites of tests. If ``TESTSUITE`` is not set, the implementation"
" of ``check-local`` should run all normal tests.  It is up to the project"
" to define what different values for ``TESTSUTE`` will do. See the "
":doc:`Testing Guide <TestingGuide>` for further details."
msgstr ""

#: ../../MakefileGuide.rst:324
msgid ""
"This target should be implemented by the ``Makefile`` in the project's "
"``test`` directory. It is invoked by the ``check`` target elsewhere.  "
"Each project is free to define the actions of ``check-local`` as "
"appropriate for that project. The LLVM project itself uses the :doc:`Lit "
"<CommandGuide/lit>` testing tool to run a suite of feature and regression"
" tests. Other projects may choose to use :program:`lit` or any other "
"testing mechanism."
msgstr ""

#: ../../MakefileGuide.rst:334
msgid ""
"This target cleans the build directory, recursively removing all things "
"that the Makefile builds. The cleaning rules have been made guarded so "
"they shouldn't go awry (via ``rm -f $(UNSET_VARIABLE)/*`` which will "
"attempt to erase the entire directory structure)."
msgstr ""

#: ../../MakefileGuide.rst:342
msgid ""
"This target does the same thing as ``clean`` but only for the current "
"(local) directory."
msgstr ""

#: ../../MakefileGuide.rst:348
msgid ""
"This target builds a distribution tarball. It first builds the entire "
"project using the ``all`` target and then tars up the necessary files and"
" compresses it. The generated tarball is sufficient for a casual source "
"distribution, but probably not for a release (see ``dist-check``)."
msgstr ""

#: ../../MakefileGuide.rst:356
msgid ""
"This target does the same thing as the ``dist`` target but also checks "
"the distribution tarball. The check is made by unpacking the tarball to a"
" new directory, configuring it, building it, installing it, and then "
"verifying that the installation results are correct (by comparing to the "
"original build).  This target can take a long time to run but should be "
"done before a release goes out to make sure that the distributed tarball "
"can actually be built into a working release."
msgstr ""

#: ../../MakefileGuide.rst:367
msgid ""
"This is a special form of the ``clean`` clean target. It performs a "
"normal ``clean`` but also removes things pertaining to building the "
"distribution."
msgstr ""

#: ../../MakefileGuide.rst:373
msgid ""
"This target finalizes shared objects and executables and copies all "
"libraries, headers, executables and documentation to the directory given "
"with the ``--prefix`` option to ``configure``.  When completed, the "
"prefix directory will have everything needed to **use** LLVM."
msgstr ""

#: ../../MakefileGuide.rst:378
msgid ""
"The LLVM makefiles can generate complete **internal** documentation for "
"all the classes by using ``doxygen``. By default, this feature is **not**"
" enabled because it takes a long time and generates a massive amount of "
"data (>100MB). If you want this feature, you must configure LLVM with the"
" --enable-doxygen switch and ensure that a modern version of doxygen "
"(1.3.7 or later) is available in your ``PATH``. You can download doxygen "
"from `here "
"<http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc>`_."
msgstr ""

#: ../../MakefileGuide.rst:389
msgid ""
"This utility target checks to see if the ``Makefile`` in the object "
"directory is older than the ``Makefile`` in the source directory and "
"copies it if so. It also reruns the ``configure`` script if that needs to"
" be done and rebuilds the ``Makefile.config`` file similarly. Users may "
"overload this target to ensure that sanity checks are run *before* any "
"building of targets as all the targets depend on ``preconditions``."
msgstr ""

#: ../../MakefileGuide.rst:399
msgid ""
"This utility target just causes the LLVM makefiles to print out some of "
"the makefile variables so that you can double check how things are set."
msgstr ""

#: ../../MakefileGuide.rst:403
msgid "``reconfigure``"
msgstr ""

#: ../../MakefileGuide.rst:405
msgid ""
"This utility target will force a reconfigure of LLVM or your project. It "
"simply runs ``$(PROJ_OBJ_ROOT)/config.status --recheck`` to rerun the "
"configuration tests and rebuild the configured files. This isn't "
"generally useful as the makefiles will reconfigure themselves whenever "
"its necessary."
msgstr ""

#: ../../MakefileGuide.rst:411
msgid "``spotless``"
msgstr ""

#: ../../MakefileGuide.rst:415
msgid "Use with caution!"
msgstr ""

#: ../../MakefileGuide.rst:417
msgid ""
"This utility target, only available when ``$(PROJ_OBJ_ROOT)`` is not the "
"same as ``$(PROJ_SRC_ROOT)``, will completely clean the "
"``$(PROJ_OBJ_ROOT)`` directory by removing its content entirely and "
"reconfiguring the directory. This returns the ``$(PROJ_OBJ_ROOT)`` "
"directory to a completely fresh state. All content in the directory "
"except configured files and top-level makefiles will be lost."
msgstr ""

#: ../../MakefileGuide.rst:426
msgid ""
"This target will generate a ``TAGS`` file in the top-level source "
"directory. It is meant for use with emacs, XEmacs, or ViM. The TAGS file "
"provides an index of symbol definitions so that the editor can jump you "
"to the definition quickly."
msgstr ""

#: ../../MakefileGuide.rst:434
msgid ""
"This target is the opposite of the ``install`` target. It removes the "
"header, library and executable files from the installation directories. "
"Note that the directories themselves are not removed because it is not "
"guaranteed that LLVM is the only thing installing there (e.g. "
"``--prefix=/usr``)."
msgstr ""

#: ../../MakefileGuide.rst:442
msgid "Variables"
msgstr ""

#: ../../MakefileGuide.rst:444
msgid ""
"Variables are used to tell the LLVM Makefile System what to do and to "
"obtain information from it. Variables are also used internally by the "
"LLVM Makefile System. Variable names that contain only the upper case "
"alphabetic letters and underscore are intended for use by the end user. "
"All other variables are internal to the LLVM Makefile System and should "
"not be relied upon nor modified. The sections below describe how to use "
"the LLVM Makefile variables."
msgstr ""

#: ../../MakefileGuide.rst:453
msgid "Control Variables"
msgstr ""

#: ../../MakefileGuide.rst:455
msgid ""
"Variables listed in the table below should be set *before* the inclusion "
"of `$(LEVEL)/Makefile.common`_.  These variables provide input to the "
"LLVM make system that tell it what to do for the current directory."
msgstr ""

#: ../../MakefileGuide.rst:460
msgid "``BUILD_ARCHIVE``"
msgstr ""

#: ../../MakefileGuide.rst:460
msgid "If set to any value, causes an archive (.a) library to be built."
msgstr ""

#: ../../MakefileGuide.rst:465
msgid "``BUILT_SOURCES``"
msgstr ""

#: ../../MakefileGuide.rst:463
msgid ""
"Specifies a set of source files that are generated from other source "
"files. These sources will be built before any other target processing to "
"ensure they are present."
msgstr ""

#: ../../MakefileGuide.rst:468
msgid "``CONFIG_FILES``"
msgstr ""

#: ../../MakefileGuide.rst:468
msgid "Specifies a set of configuration files to be installed."
msgstr ""

#: ../../MakefileGuide.rst:474
msgid "``DEBUG_SYMBOLS``"
msgstr ""

#: ../../MakefileGuide.rst:471
msgid ""
"If set to any value, causes the build to include debugging symbols even "
"in optimized objects, libraries and executables. This alters the flags "
"specified to the compilers and linkers. Debugging isn't fun in an "
"optimized build, but it is possible."
msgstr ""

#: ../../MakefileGuide.rst:479
msgid "``DIRS``"
msgstr ""

#: ../../MakefileGuide.rst:477
msgid ""
"Specifies a set of directories, usually children of the current "
"directory, that should also be made using the same goal. These "
"directories will be built serially."
msgstr ""

#: ../../MakefileGuide.rst:484
msgid "``DISABLE_AUTO_DEPENDENCIES``"
msgstr ""

#: ../../MakefileGuide.rst:482
msgid ""
"If set to any value, causes the makefiles to **not** automatically "
"generate dependencies when running the compiler. Use of this feature is "
"discouraged and it may be removed at a later date."
msgstr ""

#: ../../MakefileGuide.rst:490
msgid "``ENABLE_OPTIMIZED``"
msgstr ""

#: ../../MakefileGuide.rst:487
msgid ""
"If set to 1, causes the build to generate optimized objects, libraries "
"and executables. This alters the flags specified to the compilers and "
"linkers. Generally debugging won't be a fun experience with an optimized "
"build."
msgstr ""

#: ../../MakefileGuide.rst:497
msgid "``ENABLE_PROFILING``"
msgstr ""

#: ../../MakefileGuide.rst:493
msgid ""
"If set to 1, causes the build to generate both optimized and profiled "
"objects, libraries and executables. This alters the flags specified to "
"the compilers and linkers to ensure that profile data can be collected "
"from the tools built. Use the ``gprof`` tool to analyze the output from "
"the profiled tools (``gmon.out``)."
msgstr ""

#: ../../MakefileGuide.rst:503
msgid "``DISABLE_ASSERTIONS``"
msgstr ""

#: ../../MakefileGuide.rst:500
msgid ""
"If set to 1, causes the build to disable assertions, even if building a "
"debug or profile build.  This will exclude all assertion check code from "
"the build. LLVM will execute faster, but with little help when things go "
"wrong."
msgstr ""

#: ../../MakefileGuide.rst:508
msgid "``EXPERIMENTAL_DIRS``"
msgstr ""

#: ../../MakefileGuide.rst:506
msgid ""
"Specify a set of directories that should be built, but if they fail, it "
"should not cause the build to fail. Note that this should only be used "
"temporarily while code is being written."
msgstr ""

#: ../../MakefileGuide.rst:512
msgid "``EXPORTED_SYMBOL_FILE``"
msgstr ""

#: ../../MakefileGuide.rst:511
msgid ""
"Specifies the name of a single file that contains a list of the symbols "
"to be exported by the linker. One symbol per line."
msgstr ""

#: ../../MakefileGuide.rst:515
msgid "``EXPORTED_SYMBOL_LIST``"
msgstr ""

#: ../../MakefileGuide.rst:515
msgid "Specifies a set of symbols to be exported by the linker."
msgstr ""

#: ../../MakefileGuide.rst:521
msgid "``EXTRA_DIST``"
msgstr ""

#: ../../MakefileGuide.rst:518
msgid ""
"Specifies additional files that should be distributed with LLVM. All "
"source files, all built sources, all Makefiles, and most documentation "
"files will be automatically distributed. Use this variable to distribute "
"any files that are not automatically distributed."
msgstr ""

#: ../../MakefileGuide.rst:526
msgid "``KEEP_SYMBOLS``"
msgstr ""

#: ../../MakefileGuide.rst:524
msgid ""
"If set to any value, specifies that when linking executables the "
"makefiles should retain debug symbols in the executable. Normally, "
"symbols are stripped from the executable."
msgstr ""

#: ../../MakefileGuide.rst:531
msgid "``LEVEL`` (required)"
msgstr ""

#: ../../MakefileGuide.rst:529
msgid ""
"Specify the level of nesting from the top level. This variable must be "
"set in each makefile as it is used to find the top level and thus the "
"other makefiles."
msgstr ""

#: ../../MakefileGuide.rst:534
msgid "``LIBRARYNAME``"
msgstr ""

#: ../../MakefileGuide.rst:534
msgid "Specify the name of the library to be built. (Required For Libraries)"
msgstr ""

#: ../../MakefileGuide.rst:544
msgid "``LINK_COMPONENTS``"
msgstr ""

#: ../../MakefileGuide.rst:537
msgid ""
"When specified for building a tool, the value of this variable will be "
"passed to the ``llvm-config`` tool to generate a link line for the tool. "
"Unlike ``USEDLIBS`` and ``LLVMLIBS``, not all libraries need to be "
"specified. The ``llvm-config`` tool will figure out the library "
"dependencies and add any libraries that are needed. The ``USEDLIBS`` "
"variable can still be used in conjunction with ``LINK_COMPONENTS`` so "
"that additional project-specific libraries can be linked with the LLVM "
"libraries specified by ``LINK_COMPONENTS``."
msgstr ""

#: ../../MakefileGuide.rst:553
msgid "``LINK_LIBS_IN_SHARED``"
msgstr ""

#: ../../MakefileGuide.rst:549
msgid ""
"By default, shared library linking will ignore any libraries specified "
"with the `LLVMLIBS`_ or `USEDLIBS`_. This prevents shared libs from "
"including things that will be in the LLVM tool the shared library will be"
" loaded into. However, sometimes it is useful to link certain libraries "
"into your shared library and this option enables that feature."
msgstr ""

#: ../../MakefileGuide.rst:559
msgid "``LLVMLIBS``"
msgstr ""

#: ../../MakefileGuide.rst:558
msgid ""
"Specifies the set of libraries from the LLVM ``$(ObjDir)`` that will be "
"linked into the tool or library."
msgstr ""

#: ../../MakefileGuide.rst:566
msgid "``LOADABLE_MODULE``"
msgstr ""

#: ../../MakefileGuide.rst:562
msgid ""
"If set to any value, causes the shared library being built to also be a "
"loadable module. Loadable modules can be opened with the dlopen() "
"function and searched with dlsym (or the operating system's equivalent). "
"Note that setting this variable without also setting ``SHARED_LIBRARY`` "
"will have no effect."
msgstr ""

#: ../../MakefileGuide.rst:572
msgid "``NO_INSTALL``"
msgstr ""

#: ../../MakefileGuide.rst:569
msgid ""
"Specifies that the build products of the directory should not be "
"installed but should be built even if the ``install`` target is given.  "
"This is handy for directories that build libraries or tools that are only"
" used as part of the build process, such as code generators (e.g.  "
"``tblgen``)."
msgstr ""

#: ../../MakefileGuide.rst:576
msgid "``OPTIONAL_DIRS``"
msgstr ""

#: ../../MakefileGuide.rst:575
msgid ""
"Specify a set of directories that may be built, if they exist, but it is "
"not an error for them not to exist."
msgstr ""

#: ../../MakefileGuide.rst:580
msgid "``PARALLEL_DIRS``"
msgstr ""

#: ../../MakefileGuide.rst:579
msgid ""
"Specify a set of directories to build recursively and in parallel if the "
"``-j`` option was used with ``make``."
msgstr ""

#: ../../MakefileGuide.rst:589
msgid "``SHARED_LIBRARY``"
msgstr ""

#: ../../MakefileGuide.rst:585
msgid ""
"If set to any value, causes a shared library (``.so``) to be built in "
"addition to any other kinds of libraries. Note that this option will "
"cause all source files to be built twice: once with options for position "
"independent code and once without. Use it only where you really need a "
"shared library."
msgstr ""

#: ../../MakefileGuide.rst:595
msgid "``SOURCES`` (optional)"
msgstr ""

#: ../../MakefileGuide.rst:592
msgid ""
"Specifies the list of source files in the current directory to be built. "
"Source files of any type may be specified (programs, documentation, "
"config files, etc.). If not specified, the makefile system will infer the"
" set of source files from the files present in the current directory."
msgstr ""

#: ../../MakefileGuide.rst:600
msgid "``SUFFIXES``"
msgstr ""

#: ../../MakefileGuide.rst:598
msgid ""
"Specifies a set of filename suffixes that occur in suffix match rules.  "
"Only set this if your local ``Makefile`` specifies additional suffix "
"match rules."
msgstr ""

#: ../../MakefileGuide.rst:605
msgid "``TARGET``"
msgstr ""

#: ../../MakefileGuide.rst:603
msgid ""
"Specifies the name of the LLVM code generation target that the current "
"directory builds. Setting this variable enables additional rules to build"
" ``.inc`` files from ``.td`` files."
msgstr ""

#: ../../MakefileGuide.rst:610
msgid "``TESTSUITE``"
msgstr ""

#: ../../MakefileGuide.rst:610
msgid "Specifies the directory of tests to run in ``llvm/test``."
msgstr ""

#: ../../MakefileGuide.rst:613
msgid "``TOOLNAME``"
msgstr ""

#: ../../MakefileGuide.rst:613
msgid "Specifies the name of the tool that the current directory should build."
msgstr ""

#: ../../MakefileGuide.rst:620
msgid "``TOOL_VERBOSE``"
msgstr ""

#: ../../MakefileGuide.rst:616
msgid ""
"Implies ``VERBOSE`` and also tells each tool invoked to be verbose. This "
"is handy when you're trying to see the sub-tools invoked by each tool "
"invoked by the makefile. For example, this will pass ``-v`` to the GCC "
"compilers which causes it to print out the command lines it uses to "
"invoke sub-tools (compiler, assembler, linker)."
msgstr ""

#: ../../MakefileGuide.rst:626
msgid "``USEDLIBS``"
msgstr ""

#: ../../MakefileGuide.rst:625
msgid ""
"Specifies the list of project libraries that will be linked into the tool"
" or library."
msgstr ""

#: ../../MakefileGuide.rst:630
msgid "``VERBOSE``"
msgstr ""

#: ../../MakefileGuide.rst:629
msgid ""
"Tells the Makefile system to produce detailed output of what it is doing "
"instead of just summary comments. This will generate a LOT of output."
msgstr ""

#: ../../MakefileGuide.rst:633
msgid "Override Variables"
msgstr ""

#: ../../MakefileGuide.rst:635
msgid ""
"Override variables can be used to override the default values provided by"
" the LLVM makefile system. These variables can be set in several ways:"
msgstr ""

#: ../../MakefileGuide.rst:638
msgid "In the environment (e.g. setenv, export) --- not recommended."
msgstr ""

#: ../../MakefileGuide.rst:639
msgid "On the ``make`` command line --- recommended."
msgstr ""

#: ../../MakefileGuide.rst:640
msgid "On the ``configure`` command line."
msgstr ""

#: ../../MakefileGuide.rst:641
msgid ""
"In the Makefile (only *after* the inclusion of "
"`$(LEVEL)/Makefile.common`_)."
msgstr ""

#: ../../MakefileGuide.rst:643
msgid "The override variables are given below:"
msgstr ""

#: ../../MakefileGuide.rst:646
msgid "``AR`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:646
msgid "Specifies the path to the ``ar`` tool."
msgstr ""

#: ../../MakefileGuide.rst:650
msgid "``PROJ_OBJ_DIR``"
msgstr ""

#: ../../MakefileGuide.rst:649
msgid ""
"The directory into which the products of build rules will be placed.  "
"This might be the same as `PROJ_SRC_DIR`_ but typically is not."
msgstr ""

#: ../../MakefileGuide.rst:655
msgid "``PROJ_SRC_DIR``"
msgstr ""

#: ../../MakefileGuide.rst:655
msgid "The directory which contains the source files to be built."
msgstr ""

#: ../../MakefileGuide.rst:659
msgid "``BUILD_EXAMPLES``"
msgstr ""

#: ../../MakefileGuide.rst:658
msgid ""
"If set to 1, build examples in ``examples`` and (if building Clang) "
"``tools/clang/examples`` directories."
msgstr ""

#: ../../MakefileGuide.rst:662
msgid "``BZIP2`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:662
msgid "The path to the ``bzip2`` tool."
msgstr ""

#: ../../MakefileGuide.rst:665
msgid "``CC`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:665
msgid "The path to the 'C' compiler."
msgstr ""

#: ../../MakefileGuide.rst:668
msgid "``CFLAGS``"
msgstr ""

#: ../../MakefileGuide.rst:668
msgid "Additional flags to be passed to the 'C' compiler."
msgstr ""

#: ../../MakefileGuide.rst:671
msgid "``CPPFLAGS``"
msgstr ""

#: ../../MakefileGuide.rst:671
msgid "Additional flags passed to the C/C++ preprocessor."
msgstr ""

#: ../../MakefileGuide.rst:674
msgid "``CXX``"
msgstr ""

#: ../../MakefileGuide.rst:674
msgid "Specifies the path to the C++ compiler."
msgstr ""

#: ../../MakefileGuide.rst:677
msgid "``CXXFLAGS``"
msgstr ""

#: ../../MakefileGuide.rst:677
msgid "Additional flags to be passed to the C++ compiler."
msgstr ""

#: ../../MakefileGuide.rst:681
msgid "``DATE`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:680
msgid ""
"Specifies the path to the ``date`` program or any program that can "
"generate the current date and time on its standard output."
msgstr ""

#: ../../MakefileGuide.rst:684
msgid "``DOT`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:684
msgid "Specifies the path to the ``dot`` tool or ``false`` if there isn't one."
msgstr ""

#: ../../MakefileGuide.rst:687
msgid "``ECHO`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:687
msgid "Specifies the path to the ``echo`` tool for printing output."
msgstr ""

#: ../../MakefileGuide.rst:692
msgid "``EXEEXT`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:690
msgid ""
"Provides the extension to be used on executables built by the makefiles. "
"The value may be empty on platforms that do not use file extensions for "
"executables (e.g. Unix)."
msgstr ""

#: ../../MakefileGuide.rst:695
msgid "``INSTALL`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:695
msgid "Specifies the path to the ``install`` tool."
msgstr ""

#: ../../MakefileGuide.rst:698
msgid "``LDFLAGS`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:698
msgid "Allows users to specify additional flags to pass to the linker."
msgstr ""

#: ../../MakefileGuide.rst:701
msgid "``LIBS`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:701
msgid "The list of libraries that should be linked with each tool."
msgstr ""

#: ../../MakefileGuide.rst:705
msgid "``LIBTOOL`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:704
msgid ""
"Specifies the path to the ``libtool`` tool. This tool is renamed "
"``mklib`` by the ``configure`` script."
msgstr ""

#: ../../MakefileGuide.rst:708
msgid "``LLVMAS`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:708
msgid "Specifies the path to the ``llvm-as`` tool."
msgstr ""

#: ../../MakefileGuide.rst:711
msgid "``LLVMGCC`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:711
msgid "Specifies the path to the LLVM version of the GCC 'C' Compiler."
msgstr ""

#: ../../MakefileGuide.rst:714
msgid "``LLVMGXX`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:714
msgid "Specifies the path to the LLVM version of the GCC C++ Compiler."
msgstr ""

#: ../../MakefileGuide.rst:717
msgid "``LLVMLD`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:717
msgid "Specifies the path to the LLVM bitcode linker tool"
msgstr ""

#: ../../MakefileGuide.rst:720
msgid "``LLVM_OBJ_ROOT`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:720
msgid "Specifies the top directory into which the output of the build is placed."
msgstr ""

#: ../../MakefileGuide.rst:723
msgid "``LLVM_SRC_ROOT`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:723
msgid "Specifies the top directory in which the sources are found."
msgstr ""

#: ../../MakefileGuide.rst:727
msgid "``LLVM_TARBALL_NAME`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:726
msgid ""
"Specifies the name of the distribution tarball to create. This is "
"configured from the name of the project and its version number."
msgstr ""

#: ../../MakefileGuide.rst:730
msgid "``MKDIR`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:730
msgid "Specifies the path to the ``mkdir`` tool that creates directories."
msgstr ""

#: ../../MakefileGuide.rst:733
msgid "``ONLY_TOOLS``"
msgstr ""

#: ../../MakefileGuide.rst:733
msgid "If set, specifies the list of tools to build."
msgstr ""

#: ../../MakefileGuide.rst:737
msgid "``PLATFORMSTRIPOPTS``"
msgstr ""

#: ../../MakefileGuide.rst:736
msgid ""
"The options to provide to the linker to specify that a stripped (no "
"symbols) executable should be built."
msgstr ""

#: ../../MakefileGuide.rst:740
msgid "``RANLIB`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:740
msgid "Specifies the path to the ``ranlib`` tool."
msgstr ""

#: ../../MakefileGuide.rst:743
msgid "``RM`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:743
msgid "Specifies the path to the ``rm`` tool."
msgstr ""

#: ../../MakefileGuide.rst:746
msgid "``SED`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:746
msgid "Specifies the path to the ``sed`` tool."
msgstr ""

#: ../../MakefileGuide.rst:749
msgid "``SHLIBEXT`` (configured)"
msgstr ""

#: ../../MakefileGuide.rst:749
msgid "Provides the filename extension to use for shared libraries."
msgstr ""

#: ../../MakefileGuide.rst:752
msgid "``TBLGEN`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:752
msgid "Specifies the path to the ``tblgen`` tool."
msgstr ""

#: ../../MakefileGuide.rst:755
msgid "``TAR`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:755
msgid "Specifies the path to the ``tar`` tool."
msgstr ""

#: ../../MakefileGuide.rst:758
msgid "``ZIP`` (defaulted)"
msgstr ""

#: ../../MakefileGuide.rst:758
msgid "Specifies the path to the ``zip`` tool."
msgstr ""

#: ../../MakefileGuide.rst:761
msgid "Readable Variables"
msgstr ""

#: ../../MakefileGuide.rst:763
msgid ""
"Variables listed in the table below can be used by the user's Makefile "
"but should not be changed. Changing the value will generally cause the "
"build to go wrong, so don't do it."
msgstr ""

#: ../../MakefileGuide.rst:769
msgid "``bindir``"
msgstr ""

#: ../../MakefileGuide.rst:768
msgid ""
"The directory into which executables will ultimately be installed. This "
"value is derived from the ``--prefix`` option given to ``configure``."
msgstr ""

#: ../../MakefileGuide.rst:773
msgid "``BuildMode``"
msgstr ""

#: ../../MakefileGuide.rst:772
msgid "The name of the type of build being performed: Debug, Release, or Profile."
msgstr ""

#: ../../MakefileGuide.rst:777
msgid "``bytecode_libdir``"
msgstr ""

#: ../../MakefileGuide.rst:776
msgid ""
"The directory into which bitcode libraries will ultimately be installed. "
"This value is derived from the ``--prefix`` option given to "
"``configure``."
msgstr ""

#: ../../MakefileGuide.rst:780
msgid "``ConfigureScriptFLAGS``"
msgstr ""

#: ../../MakefileGuide.rst:780
msgid "Additional flags given to the ``configure`` script when reconfiguring."
msgstr ""

#: ../../MakefileGuide.rst:783
msgid "``DistDir``"
msgstr ""

#: ../../MakefileGuide.rst:783
msgid "The *current* directory for which a distribution copy is being made."
msgstr ""

#: ../../MakefileGuide.rst:790
msgid "``Echo``"
msgstr ""

#: ../../MakefileGuide.rst:788
msgid ""
"The LLVM Makefile System output command. This provides the ``llvm[n]`` "
"prefix and starts with ``@`` so the command itself is not printed by "
"``make``."
msgstr ""

#: ../../MakefileGuide.rst:793
msgid "``EchoCmd``"
msgstr ""

#: ../../MakefileGuide.rst:793
msgid "Same as `Echo`_ but without the leading ``@``."
msgstr ""

#: ../../MakefileGuide.rst:797
msgid "``includedir``"
msgstr ""

#: ../../MakefileGuide.rst:796
msgid ""
"The directory into which include files will ultimately be installed.  "
"This value is derived from the ``--prefix`` option given to "
"``configure``."
msgstr ""

#: ../../MakefileGuide.rst:802
msgid "``libdir``"
msgstr ""

#: ../../MakefileGuide.rst:800
msgid ""
"The directory into which native libraries will ultimately be installed. "
"This value is derived from the ``--prefix`` option given to "
"``configure``."
msgstr ""

#: ../../MakefileGuide.rst:806
msgid "``LibDir``"
msgstr ""

#: ../../MakefileGuide.rst:805
msgid ""
"The configuration specific directory into which libraries are placed "
"before installation."
msgstr ""

#: ../../MakefileGuide.rst:809
msgid "``MakefileConfig``"
msgstr ""

#: ../../MakefileGuide.rst:809
msgid "Full path of the ``Makefile.config`` file."
msgstr ""

#: ../../MakefileGuide.rst:812
msgid "``MakefileConfigIn``"
msgstr ""

#: ../../MakefileGuide.rst:812
msgid "Full path of the ``Makefile.config.in`` file."
msgstr ""

#: ../../MakefileGuide.rst:816
msgid "``ObjDir``"
msgstr ""

#: ../../MakefileGuide.rst:815
msgid ""
"The configuration and directory specific directory where build objects "
"(compilation results) are placed."
msgstr ""

#: ../../MakefileGuide.rst:820
msgid "``SubDirs``"
msgstr ""

#: ../../MakefileGuide.rst:819
msgid ""
"The complete list of sub-directories of the current directory as "
"specified by other variables."
msgstr ""

#: ../../MakefileGuide.rst:823
msgid "``Sources``"
msgstr ""

#: ../../MakefileGuide.rst:823
msgid "The complete list of source files."
msgstr ""

#: ../../MakefileGuide.rst:828
msgid "``sysconfdir``"
msgstr ""

#: ../../MakefileGuide.rst:826
msgid ""
"The directory into which configuration files will ultimately be "
"installed. This value is derived from the ``--prefix`` option given to "
"``configure``."
msgstr ""

#: ../../MakefileGuide.rst:832
msgid "``ToolDir``"
msgstr ""

#: ../../MakefileGuide.rst:831
msgid ""
"The configuration specific directory into which executables are placed "
"before they are installed."
msgstr ""

#: ../../MakefileGuide.rst:835
msgid "``TopDistDir``"
msgstr ""

#: ../../MakefileGuide.rst:835
msgid "The top most directory into which the distribution files are copied."
msgstr ""

#: ../../MakefileGuide.rst:840
msgid "``Verb``"
msgstr ""

#: ../../MakefileGuide.rst:838
msgid ""
"Use this as the first thing on your build script lines to enable or "
"disable verbose mode. It expands to either an ``@`` (quiet mode) or "
"nothing (verbose mode)."
msgstr ""

#: ../../MakefileGuide.rst:843
msgid "Internal Variables"
msgstr ""

#: ../../MakefileGuide.rst:845
msgid ""
"Variables listed below are used by the LLVM Makefile System and "
"considered internal. You should not use these variables under any "
"circumstances."
msgstr ""

