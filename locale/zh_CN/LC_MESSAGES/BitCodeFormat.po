# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2016, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-17 11:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../BitCodeFormat.rst:6
msgid "LLVM Bitcode File Format"
msgstr ""

#: ../../BitCodeFormat.rst:12
msgid "Abstract"
msgstr ""

#: ../../BitCodeFormat.rst:14
msgid ""
"This document describes the LLVM bitstream file format and the encoding "
"of the LLVM IR into it."
msgstr ""

#: ../../BitCodeFormat.rst:18
msgid "Overview"
msgstr ""

#: ../../BitCodeFormat.rst:20
msgid ""
"What is commonly known as the LLVM bitcode file format (also, sometimes "
"anachronistically known as bytecode) is actually two things: a `bitstream"
" container format`_ and an `encoding of LLVM IR`_ into the container "
"format."
msgstr ""

#: ../../BitCodeFormat.rst:24
msgid ""
"The bitstream format is an abstract encoding of structured data, very "
"similar to XML in some ways.  Like XML, bitstream files contain tags, and"
" nested structures, and you can parse the file without having to "
"understand the tags. Unlike XML, the bitstream format is a binary "
"encoding, and unlike XML it provides a mechanism for the file to self-"
"describe \"abbreviations\", which are effectively size optimizations for "
"the content."
msgstr ""

#: ../../BitCodeFormat.rst:31
msgid ""
"LLVM IR files may be optionally embedded into a `wrapper`_ structure, or "
"in a `native object file`_. Both of these mechanisms make it easy to "
"embed extra data along with LLVM IR files."
msgstr ""

#: ../../BitCodeFormat.rst:35
msgid ""
"This document first describes the LLVM bitstream format, describes the "
"wrapper format, then describes the record structure used by LLVM IR "
"files."
msgstr ""

#: ../../BitCodeFormat.rst:41
msgid "Bitstream Format"
msgstr ""

#: ../../BitCodeFormat.rst:43
msgid ""
"The bitstream format is literally a stream of bits, with a very simple "
"structure.  This structure consists of the following concepts:"
msgstr ""

#: ../../BitCodeFormat.rst:46
msgid "A \"`magic number`_\" that identifies the contents of the stream."
msgstr ""

#: ../../BitCodeFormat.rst:48
msgid "Encoding `primitives`_ like variable bit-rate integers."
msgstr ""

#: ../../BitCodeFormat.rst:50
msgid "`Blocks`_, which define nested content."
msgstr ""

#: ../../BitCodeFormat.rst:52
msgid "`Data Records`_, which describe entities within the file."
msgstr ""

#: ../../BitCodeFormat.rst:54
msgid "Abbreviations, which specify compression optimizations for the file."
msgstr ""

#: ../../BitCodeFormat.rst:56
msgid ""
"Note that the :doc:`llvm-bcanalyzer <CommandGuide/llvm-bcanalyzer>` tool "
"can be used to dump and inspect arbitrary bitstreams, which is very "
"useful for understanding the encoding."
msgstr ""

#: ../../BitCodeFormat.rst:63
msgid "Magic Numbers"
msgstr ""

#: ../../BitCodeFormat.rst:65
msgid ""
"The first two bytes of a bitcode file are 'BC' (``0x42``, ``0x43``).  The"
" second two bytes are an application-specific magic number.  Generic "
"bitcode tools can look at only the first two bytes to verify the file is "
"bitcode, while application-specific programs will want to look at all "
"four."
msgstr ""

#: ../../BitCodeFormat.rst:73
msgid "Primitives"
msgstr ""

#: ../../BitCodeFormat.rst:75
msgid ""
"A bitstream literally consists of a stream of bits, which are read in "
"order starting with the least significant bit of each byte.  The stream "
"is made up of a number of primitive values that encode a stream of "
"unsigned integer values. These integers are encoded in two ways: either "
"as `Fixed Width Integers`_ or as `Variable Width Integers`_."
msgstr ""

#: ../../BitCodeFormat.rst:85
msgid "Fixed Width Integers"
msgstr ""

#: ../../BitCodeFormat.rst:87
msgid ""
"Fixed-width integer values have their low bits emitted directly to the "
"file. For example, a 3-bit integer value encodes 1 as 001.  Fixed width "
"integers are used when there are a well-known number of options for a "
"field.  For example, boolean values are usually encoded with a 1-bit wide"
" integer."
msgstr ""

#: ../../BitCodeFormat.rst:97
msgid "Variable Width Integers"
msgstr ""

#: ../../BitCodeFormat.rst:99
msgid ""
"Variable-width integer (VBR) values encode values of arbitrary size, "
"optimizing for the case where the values are small.  Given a 4-bit VBR "
"field, any 3-bit value (0 through 7) is encoded directly, with the high "
"bit set to zero.  Values larger than N-1 bits emit their bits in a series"
" of N-1 bit chunks, where all but the last set the high bit."
msgstr ""

#: ../../BitCodeFormat.rst:105
msgid ""
"For example, the value 27 (0x1B) is encoded as 1011 0011 when emitted as "
"a vbr4 value.  The first set of four bits indicates the value 3 (011) "
"with a continuation piece (indicated by a high bit of 1).  The next word "
"indicates a value of 24 (011 << 3) with no continuation.  The sum (3+24) "
"yields the value 27."
msgstr ""

#: ../../BitCodeFormat.rst:114
msgid "6-bit characters"
msgstr ""

#: ../../BitCodeFormat.rst:116
msgid ""
"6-bit characters encode common characters into a fixed 6-bit field.  They"
" represent the following characters with the following 6-bit values:"
msgstr ""

#: ../../BitCodeFormat.rst:127
msgid ""
"This encoding is only suitable for encoding characters and strings that "
"consist only of the above characters.  It is completely incapable of "
"encoding characters not in the set."
msgstr ""

#: ../../BitCodeFormat.rst:132
msgid "Word Alignment"
msgstr ""

#: ../../BitCodeFormat.rst:134
msgid ""
"Occasionally, it is useful to emit zero bits until the bitstream is a "
"multiple of 32 bits.  This ensures that the bit position in the stream "
"can be represented as a multiple of 32-bit words."
msgstr ""

#: ../../BitCodeFormat.rst:139
msgid "Abbreviation IDs"
msgstr ""

#: ../../BitCodeFormat.rst:141
msgid ""
"A bitstream is a sequential series of `Blocks`_ and `Data Records`_.  "
"Both of these start with an abbreviation ID encoded as a fixed-bitwidth "
"field.  The width is specified by the current block, as described below."
"  The value of the abbreviation ID specifies either a builtin ID (which "
"have special meanings, defined below) or one of the abbreviation IDs "
"defined for the current block by the stream itself."
msgstr ""

#: ../../BitCodeFormat.rst:148
msgid "The set of builtin abbrev IDs is:"
msgstr ""

#: ../../BitCodeFormat.rst:150
msgid "0 - `END_BLOCK`_ --- This abbrev ID marks the end of the current block."
msgstr ""

#: ../../BitCodeFormat.rst:152
msgid ""
"1 - `ENTER_SUBBLOCK`_ --- This abbrev ID marks the beginning of a new "
"block."
msgstr ""

#: ../../BitCodeFormat.rst:155
msgid "2 - `DEFINE_ABBREV`_ --- This defines a new abbreviation."
msgstr ""

#: ../../BitCodeFormat.rst:157
msgid ""
"3 - `UNABBREV_RECORD`_ --- This ID specifies the definition of an "
"unabbreviated record."
msgstr ""

#: ../../BitCodeFormat.rst:160
msgid ""
"Abbreviation IDs 4 and above are defined by the stream itself, and "
"specify an `abbreviated record encoding`_."
msgstr ""

#: ../../BitCodeFormat.rst:166
msgid "Blocks"
msgstr ""

#: ../../BitCodeFormat.rst:168
msgid ""
"Blocks in a bitstream denote nested regions of the stream, and are "
"identified by a content-specific id number (for example, LLVM IR uses an "
"ID of 12 to represent function bodies).  Block IDs 0-7 are reserved for "
"`standard blocks`_ whose meaning is defined by Bitcode; block IDs 8 and "
"greater are application specific. Nested blocks capture the hierarchical "
"structure of the data encoded in it, and various properties are "
"associated with blocks as the file is parsed. Block definitions allow the"
" reader to efficiently skip blocks in constant time if the reader wants a"
" summary of blocks, or if it wants to efficiently skip data it does not "
"understand.  The LLVM IR reader uses this mechanism to skip function "
"bodies, lazily reading them on demand."
msgstr ""

#: ../../BitCodeFormat.rst:179
msgid ""
"When reading and encoding the stream, several properties are maintained "
"for the block.  In particular, each block maintains:"
msgstr ""

#: ../../BitCodeFormat.rst:182
msgid ""
"A current abbrev id width.  This value starts at 2 at the beginning of "
"the stream, and is set every time a block record is entered.  The block "
"entry specifies the abbrev id width for the body of the block."
msgstr ""

#: ../../BitCodeFormat.rst:186
msgid ""
"A set of abbreviations.  Abbreviations may be defined within a block, in "
"which case they are only defined in that block (neither subblocks nor "
"enclosing blocks see the abbreviation).  Abbreviations can also be "
"defined inside a `BLOCKINFO`_ block, in which case they are defined in "
"all blocks that match the ID that the ``BLOCKINFO`` block is describing."
msgstr ""

#: ../../BitCodeFormat.rst:192
msgid ""
"As sub blocks are entered, these properties are saved and the new sub-"
"block has its own set of abbreviations, and its own abbrev id width.  "
"When a sub-block is popped, the saved values are restored."
msgstr ""

#: ../../BitCodeFormat.rst:199
msgid "ENTER_SUBBLOCK Encoding"
msgstr ""

#: ../../BitCodeFormat.rst:201
msgid ""
":raw-html:`<tt>` [ENTER_SUBBLOCK, blockid\\ :sub:`vbr8`, newabbrevlen\\ "
":sub:`vbr4`, <align32bits>, blocklen_32] :raw-html:`</tt>`"
msgstr ""

#: ../../BitCodeFormat.rst:205
msgid ""
"The ``ENTER_SUBBLOCK`` abbreviation ID specifies the start of a new block"
" record.  The ``blockid`` value is encoded as an 8-bit VBR identifier, "
"and indicates the type of block being entered, which can be a `standard "
"block`_ or an application-specific block.  The ``newabbrevlen`` value is "
"a 4-bit VBR, which specifies the abbrev id width for the sub-block.  The "
"``blocklen`` value is a 32-bit aligned value that specifies the size of "
"the subblock in 32-bit words. This value allows the reader to skip over "
"the entire block in one jump."
msgstr ""

#: ../../BitCodeFormat.rst:216
msgid "END_BLOCK Encoding"
msgstr ""

#: ../../BitCodeFormat.rst:218
msgid "``[END_BLOCK, <align32bits>]``"
msgstr ""

#: ../../BitCodeFormat.rst:220
msgid ""
"The ``END_BLOCK`` abbreviation ID specifies the end of the current block "
"record. Its end is aligned to 32-bits to ensure that the size of the "
"block is an even multiple of 32-bits."
msgstr ""

#: ../../BitCodeFormat.rst:227
msgid "Data Records"
msgstr ""

#: ../../BitCodeFormat.rst:229
msgid ""
"Data records consist of a record code and a number of (up to) 64-bit "
"integer values.  The interpretation of the code and values is application"
" specific and may vary between different block types.  Records can be "
"encoded either using an unabbrev record, or with an abbreviation.  In the"
" LLVM IR format, for example, there is a record which encodes the target "
"triple of a module.  The code is ``MODULE_CODE_TRIPLE``, and the values "
"of the record are the ASCII codes for the characters in the string."
msgstr ""

#: ../../BitCodeFormat.rst:240
msgid "UNABBREV_RECORD Encoding"
msgstr ""

#: ../../BitCodeFormat.rst:242
msgid ""
":raw-html:`<tt>` [UNABBREV_RECORD, code\\ :sub:`vbr6`, numops\\ "
":sub:`vbr6`, op0\\ :sub:`vbr6`, op1\\ :sub:`vbr6`, ...] :raw-html:`</tt>`"
msgstr ""

#: ../../BitCodeFormat.rst:246
msgid ""
"An ``UNABBREV_RECORD`` provides a default fallback encoding, which is "
"both completely general and extremely inefficient.  It can describe an "
"arbitrary record by emitting the code and operands as VBRs."
msgstr ""

#: ../../BitCodeFormat.rst:250
msgid ""
"For example, emitting an LLVM IR target triple as an unabbreviated record"
" requires emitting the ``UNABBREV_RECORD`` abbrevid, a vbr6 for the "
"``MODULE_CODE_TRIPLE`` code, a vbr6 for the length of the string, which "
"is equal to the number of operands, and a vbr6 for each character.  "
"Because there are no letters with values less than 32, each letter would "
"need to be emitted as at least a two-part VBR, which means that each "
"letter would require at least 12 bits.  This is not an efficient "
"encoding, but it is fully general."
msgstr ""

#: ../../BitCodeFormat.rst:261
msgid "Abbreviated Record Encoding"
msgstr ""

#: ../../BitCodeFormat.rst:263
msgid "``[<abbrevid>, fields...]``"
msgstr ""

#: ../../BitCodeFormat.rst:265
msgid ""
"An abbreviated record is a abbreviation id followed by a set of fields "
"that are encoded according to the `abbreviation definition`_.  This "
"allows records to be encoded significantly more densely than records "
"encoded with the `UNABBREV_RECORD`_ type, and allows the abbreviation "
"types to be specified in the stream itself, which allows the files to be "
"completely self describing.  The actual encoding of abbreviations is "
"defined below."
msgstr ""

#: ../../BitCodeFormat.rst:272
msgid ""
"The record code, which is the first field of an abbreviated record, may "
"be encoded in the abbreviation definition (as a literal operand) or "
"supplied in the abbreviated record (as a Fixed or VBR operand value)."
msgstr ""

#: ../../BitCodeFormat.rst:279
msgid "Abbreviations"
msgstr ""

#: ../../BitCodeFormat.rst:281
msgid ""
"Abbreviations are an important form of compression for bitstreams.  The "
"idea is to specify a dense encoding for a class of records once, then use"
" that encoding to emit many records.  It takes space to emit the encoding"
" into the file, but the space is recouped (hopefully plus some) when the "
"records that use it are emitted."
msgstr ""

#: ../../BitCodeFormat.rst:287
msgid ""
"Abbreviations can be determined dynamically per client, per file. Because"
" the abbreviations are stored in the bitstream itself, different streams "
"of the same format can contain different sets of abbreviations according "
"to the needs of the specific stream.  As a concrete example, LLVM IR "
"files usually emit an abbreviation for binary operators.  If a specific "
"LLVM module contained no or few binary operators, the abbreviation does "
"not need to be emitted."
msgstr ""

#: ../../BitCodeFormat.rst:297
msgid "DEFINE_ABBREV Encoding"
msgstr ""

#: ../../BitCodeFormat.rst:299
msgid ""
":raw-html:`<tt>` [DEFINE_ABBREV, numabbrevops\\ :sub:`vbr5`, abbrevop0, "
"abbrevop1, ...] :raw-html:`</tt>`"
msgstr ""

#: ../../BitCodeFormat.rst:303
msgid ""
"A ``DEFINE_ABBREV`` record adds an abbreviation to the list of currently "
"defined abbreviations in the scope of this block.  This definition only "
"exists inside this immediate block --- it is not visible in subblocks or "
"enclosing blocks. Abbreviations are implicitly assigned IDs sequentially "
"starting from 4 (the first application-defined abbreviation ID).  Any "
"abbreviations defined in a ``BLOCKINFO`` record for the particular block "
"type receive IDs first, in order, followed by any abbreviations defined "
"within the block itself.  Abbreviated data records reference this ID to "
"indicate what abbreviation they are invoking."
msgstr ""

#: ../../BitCodeFormat.rst:312
msgid ""
"An abbreviation definition consists of the ``DEFINE_ABBREV`` abbrevid "
"followed by a VBR that specifies the number of abbrev operands, then the "
"abbrev operands themselves.  Abbreviation operands come in three forms.  "
"They all start with a single bit that indicates whether the abbrev "
"operand is a literal operand (when the bit is 1) or an encoding operand "
"(when the bit is 0)."
msgstr ""

#: ../../BitCodeFormat.rst:318
msgid ""
"Literal operands --- :raw-html:`<tt>` [1\\ :sub:`1`, litvalue\\ "
":sub:`vbr8`] :raw-html:`</tt>` --- Literal operands specify that the "
"value in the result is always a single specific value.  This specific "
"value is emitted as a vbr8 after the bit indicating that it is a literal "
"operand."
msgstr ""

#: ../../BitCodeFormat.rst:323
msgid ""
"Encoding info without data --- :raw-html:`<tt>` [0\\ :sub:`1`, encoding\\"
" :sub:`3`] :raw-html:`</tt>` --- Operand encodings that do not have extra"
" data are just emitted as their code."
msgstr ""

#: ../../BitCodeFormat.rst:327
msgid ""
"Encoding info with data --- :raw-html:`<tt>` [0\\ :sub:`1`, encoding\\ "
":sub:`3`, value\\ :sub:`vbr5`] :raw-html:`</tt>` --- Operand encodings "
"that do have extra data are emitted as their code, followed by the extra "
"data."
msgstr ""

#: ../../BitCodeFormat.rst:331
msgid "The possible operand encodings are:"
msgstr ""

#: ../../BitCodeFormat.rst:333
msgid ""
"Fixed (code 1): The field should be emitted as a `fixed-width value`_, "
"whose width is specified by the operand's extra data."
msgstr ""

#: ../../BitCodeFormat.rst:336
msgid ""
"VBR (code 2): The field should be emitted as a `variable-width value`_, "
"whose width is specified by the operand's extra data."
msgstr ""

#: ../../BitCodeFormat.rst:339
msgid ""
"Array (code 3): This field is an array of values.  The array operand has "
"no extra data, but expects another operand to follow it, indicating the "
"element type of the array.  When reading an array in an abbreviated "
"record, the first integer is a vbr6 that indicates the array length, "
"followed by the encoded elements of the array.  An array may only occur "
"as the last operand of an abbreviation (except for the one final operand "
"that gives the array's type)."
msgstr ""

#: ../../BitCodeFormat.rst:347
msgid ""
"Char6 (code 4): This field should be emitted as a `char6-encoded value`_."
" This operand type takes no extra data. Char6 encoding is normally used "
"as an array element type."
msgstr ""

#: ../../BitCodeFormat.rst:351
msgid ""
"Blob (code 5): This field is emitted as a vbr6, followed by padding to a "
"32-bit boundary (for alignment) and an array of 8-bit objects.  The array"
" of bytes is further followed by tail padding to ensure that its total "
"length is a multiple of 4 bytes.  This makes it very efficient for the "
"reader to decode the data without having to make a copy of it: it can use"
" a pointer to the data in the mapped in file and poke directly at it.  A "
"blob may only occur as the last operand of an abbreviation."
msgstr ""

#: ../../BitCodeFormat.rst:359
msgid ""
"For example, target triples in LLVM modules are encoded as a record of "
"the form ``[TRIPLE, 'a', 'b', 'c', 'd']``.  Consider if the bitstream "
"emitted the following abbrev entry:"
msgstr ""

#: ../../BitCodeFormat.rst:369
msgid ""
"When emitting a record with this abbreviation, the above entry would be "
"emitted as:"
msgstr ""

#: ../../BitCodeFormat.rst:372
msgid ""
":raw-html:`<tt><blockquote>` [4\\ :sub:`abbrevwidth`, 2\\ :sub:`4`, 4\\ "
":sub:`vbr6`, 0\\ :sub:`6`, 1\\ :sub:`6`, 2\\ :sub:`6`, 3\\ :sub:`6`] "
":raw-html:`</blockquote></tt>`"
msgstr ""

#: ../../BitCodeFormat.rst:376
msgid "These values are:"
msgstr ""

#: ../../BitCodeFormat.rst:378
msgid "The first value, 4, is the abbreviation ID for this abbreviation."
msgstr ""

#: ../../BitCodeFormat.rst:380
msgid ""
"The second value, 2, is the record code for ``TRIPLE`` records within "
"LLVM IR file ``MODULE_BLOCK`` blocks."
msgstr ""

#: ../../BitCodeFormat.rst:383
msgid "The third value, 4, is the length of the array."
msgstr ""

#: ../../BitCodeFormat.rst:385
msgid "The rest of the values are the char6 encoded values for ``\"abcd\"``."
msgstr ""

#: ../../BitCodeFormat.rst:387
msgid ""
"With this abbreviation, the triple is emitted with only 37 bits (assuming"
" a abbrev id width of 3).  Without the abbreviation, significantly more "
"space would be required to emit the target triple.  Also, because the "
"``TRIPLE`` value is not emitted as a literal in the abbreviation, the "
"abbreviation can also be used for any other string value."
msgstr ""

#: ../../BitCodeFormat.rst:397
msgid "Standard Blocks"
msgstr ""

#: ../../BitCodeFormat.rst:399
msgid ""
"In addition to the basic block structure and record encodings, the "
"bitstream also defines specific built-in block types.  These block types "
"specify how the stream is to be decoded or other metadata.  In the "
"future, new standard blocks may be added.  Block IDs 0-7 are reserved for"
" standard blocks."
msgstr ""

#: ../../BitCodeFormat.rst:407
msgid "#0 - BLOCKINFO Block"
msgstr ""

#: ../../BitCodeFormat.rst:409
msgid ""
"The ``BLOCKINFO`` block allows the description of metadata for other "
"blocks. The currently specified records are:"
msgstr ""

#: ../../BitCodeFormat.rst:419
msgid ""
"The ``SETBID`` record (code 1) indicates which block ID is being "
"described. ``SETBID`` records can occur multiple times throughout the "
"block to change which block ID is being described.  There must be a "
"``SETBID`` record prior to any other records."
msgstr ""

#: ../../BitCodeFormat.rst:424
msgid ""
"Standard ``DEFINE_ABBREV`` records can occur inside ``BLOCKINFO`` blocks,"
" but unlike their occurrence in normal blocks, the abbreviation is "
"defined for blocks matching the block ID we are describing, *not* the "
"``BLOCKINFO`` block itself.  The abbreviations defined in ``BLOCKINFO`` "
"blocks receive abbreviation IDs as described in `DEFINE_ABBREV`_."
msgstr ""

#: ../../BitCodeFormat.rst:430
msgid ""
"The ``BLOCKNAME`` record (code 2) can optionally occur in this block.  "
"The elements of the record are the bytes of the string name of the block."
" llvm-bcanalyzer can use this to dump out bitcode files symbolically."
msgstr ""

#: ../../BitCodeFormat.rst:434
msgid ""
"The ``SETRECORDNAME`` record (code 3) can also optionally occur in this "
"block. The first operand value is a record ID number, and the rest of the"
" elements of the record are the bytes for the string name of the record."
"  llvm-bcanalyzer can use this to dump out bitcode files symbolically."
msgstr ""

#: ../../BitCodeFormat.rst:439
msgid ""
"Note that although the data in ``BLOCKINFO`` blocks is described as "
"\"metadata,\" the abbreviations they contain are essential for parsing "
"records from the corresponding blocks.  It is not safe to skip them."
msgstr ""

#: ../../BitCodeFormat.rst:446
msgid "Bitcode Wrapper Format"
msgstr ""

#: ../../BitCodeFormat.rst:448
msgid ""
"Bitcode files for LLVM IR may optionally be wrapped in a simple wrapper "
"structure.  This structure contains a simple header that indicates the "
"offset and size of the embedded BC file.  This allows additional "
"information to be stored alongside the BC file.  The structure of this "
"file header is:"
msgstr ""

#: ../../BitCodeFormat.rst:453
msgid ""
":raw-html:`<tt><blockquote>` [Magic\\ :sub:`32`, Version\\ :sub:`32`, "
"Offset\\ :sub:`32`, Size\\ :sub:`32`, CPUType\\ :sub:`32`] :raw-"
"html:`</blockquote></tt>`"
msgstr ""

#: ../../BitCodeFormat.rst:457
msgid ""
"Each of the fields are 32-bit fields stored in little endian form (as "
"with the rest of the bitcode file fields).  The Magic number is always "
"``0x0B17C0DE`` and the version is currently always ``0``.  The Offset "
"field is the offset in bytes to the start of the bitcode stream in the "
"file, and the Size field is the size in bytes of the stream. CPUType is a"
" target-specific value that can be used to encode the CPU of the target."
msgstr ""

#: ../../BitCodeFormat.rst:467
msgid "Native Object File Wrapper Format"
msgstr ""

#: ../../BitCodeFormat.rst:469
msgid ""
"Bitcode files for LLVM IR may also be wrapped in a native object file "
"(i.e. ELF, COFF, Mach-O).  The bitcode must be stored in a section of the"
" object file named ``.llvmbc``.  This wrapper format is useful for "
"accommodating LTO in compilation pipelines where intermediate objects "
"must be native object files which contain metadata in other sections."
msgstr ""

#: ../../BitCodeFormat.rst:475
msgid "Not all tools support this format."
msgstr ""

#: ../../BitCodeFormat.rst:480
msgid "LLVM IR Encoding"
msgstr ""

#: ../../BitCodeFormat.rst:482
msgid ""
"LLVM IR is encoded into a bitstream by defining blocks and records.  It "
"uses blocks for things like constant pools, functions, symbol tables, "
"etc.  It uses records for things like instructions, global variable "
"descriptors, type descriptions, etc.  This document does not describe the"
" set of abbreviations that the writer uses, as these are fully self-"
"described in the file, and the reader is not allowed to build in any "
"knowledge of this."
msgstr ""

#: ../../BitCodeFormat.rst:490
msgid "Basics"
msgstr ""

#: ../../BitCodeFormat.rst:493
msgid "LLVM IR Magic Number"
msgstr ""

#: ../../BitCodeFormat.rst:495
msgid "The magic number for LLVM IR files is:"
msgstr ""

#: ../../BitCodeFormat.rst:497
msgid ""
":raw-html:`<tt><blockquote>` [0x0\\ :sub:`4`, 0xC\\ :sub:`4`, 0xE\\ "
":sub:`4`, 0xD\\ :sub:`4`] :raw-html:`</blockquote></tt>`"
msgstr ""

#: ../../BitCodeFormat.rst:501
msgid ""
"When combined with the bitcode magic number and viewed as bytes, this is "
"``\"BC 0xC0DE\"``."
msgstr ""

#: ../../BitCodeFormat.rst:507
msgid "Signed VBRs"
msgstr ""

#: ../../BitCodeFormat.rst:509
msgid ""
"`Variable Width Integer`_ encoding is an efficient way to encode "
"arbitrary sized unsigned values, but is an extremely inefficient for "
"encoding signed values, as signed values are otherwise treated as "
"maximally large unsigned values."
msgstr ""

#: ../../BitCodeFormat.rst:513
msgid "As such, signed VBR values of a specific width are emitted as follows:"
msgstr ""

#: ../../BitCodeFormat.rst:515
msgid ""
"Positive values are emitted as VBRs of the specified width, but with "
"their value shifted left by one."
msgstr ""

#: ../../BitCodeFormat.rst:518
msgid ""
"Negative values are emitted as VBRs of the specified width, but the "
"negated value is shifted left by one, and the low bit is set."
msgstr ""

#: ../../BitCodeFormat.rst:521
msgid ""
"With this encoding, small positive and small negative values can both be "
"emitted efficiently. Signed VBR encoding is used in ``CST_CODE_INTEGER`` "
"and ``CST_CODE_WIDE_INTEGER`` records within ``CONSTANTS_BLOCK`` blocks. "
"It is also used for phi instruction operands in `MODULE_CODE_VERSION`_ 1."
msgstr ""

#: ../../BitCodeFormat.rst:527
msgid "LLVM IR Blocks"
msgstr ""

#: ../../BitCodeFormat.rst:529
msgid "LLVM IR is defined with the following blocks:"
msgstr ""

#: ../../BitCodeFormat.rst:531
msgid ""
"8 --- `MODULE_BLOCK`_ --- This is the top-level block that contains the "
"entire module, and describes a variety of per-module information."
msgstr ""

#: ../../BitCodeFormat.rst:534
msgid "9 --- `PARAMATTR_BLOCK`_ --- This enumerates the parameter attributes."
msgstr ""

#: ../../BitCodeFormat.rst:536
msgid "10 --- `TYPE_BLOCK`_ --- This describes all of the types in the module."
msgstr ""

#: ../../BitCodeFormat.rst:538
msgid ""
"11 --- `CONSTANTS_BLOCK`_ --- This describes constants for a module or "
"function."
msgstr ""

#: ../../BitCodeFormat.rst:541
msgid "12 --- `FUNCTION_BLOCK`_ --- This describes a function body."
msgstr ""

#: ../../BitCodeFormat.rst:543
msgid "13 --- `TYPE_SYMTAB_BLOCK`_ --- This describes the type symbol table."
msgstr ""

#: ../../BitCodeFormat.rst:545
msgid "14 --- `VALUE_SYMTAB_BLOCK`_ --- This describes a value symbol table."
msgstr ""

#: ../../BitCodeFormat.rst:547
msgid "15 --- `METADATA_BLOCK`_ --- This describes metadata items."
msgstr ""

#: ../../BitCodeFormat.rst:549
msgid ""
"16 --- `METADATA_ATTACHMENT`_ --- This contains records associating "
"metadata with function instruction values."
msgstr ""

#: ../../BitCodeFormat.rst:555
msgid "MODULE_BLOCK Contents"
msgstr ""

#: ../../BitCodeFormat.rst:557
msgid ""
"The ``MODULE_BLOCK`` block (id 8) is the top-level block for LLVM bitcode"
" files, and each bitcode file must contain exactly one. In addition to "
"records (described below) containing information about the module, a "
"``MODULE_BLOCK`` block may contain the following sub-blocks:"
msgstr ""

#: ../../BitCodeFormat.rst:562
msgid "`BLOCKINFO`_"
msgstr ""

#: ../../BitCodeFormat.rst:563
msgid "`PARAMATTR_BLOCK`_"
msgstr ""

#: ../../BitCodeFormat.rst:564
msgid "`TYPE_BLOCK`_"
msgstr ""

#: ../../BitCodeFormat.rst:565
msgid "`TYPE_SYMTAB_BLOCK`_"
msgstr ""

#: ../../BitCodeFormat.rst:566 ../../BitCodeFormat.rst:1093
msgid "`VALUE_SYMTAB_BLOCK`_"
msgstr ""

#: ../../BitCodeFormat.rst:567 ../../BitCodeFormat.rst:1092
msgid "`CONSTANTS_BLOCK`_"
msgstr ""

#: ../../BitCodeFormat.rst:568
msgid "`FUNCTION_BLOCK`_"
msgstr ""

#: ../../BitCodeFormat.rst:569
msgid "`METADATA_BLOCK`_"
msgstr ""

#: ../../BitCodeFormat.rst:574
msgid "MODULE_CODE_VERSION Record"
msgstr ""

#: ../../BitCodeFormat.rst:576
msgid "``[VERSION, version#]``"
msgstr ""

#: ../../BitCodeFormat.rst:578
msgid ""
"The ``VERSION`` record (code 1) contains a single value indicating the "
"format version. Versions 0 and 1 are supported at this time. The "
"difference between version 0 and 1 is in the encoding of instruction "
"operands in each `FUNCTION_BLOCK`_."
msgstr ""

#: ../../BitCodeFormat.rst:583
msgid ""
"In version 0, each value defined by an instruction is assigned an ID "
"unique to the function. Function-level value IDs are assigned starting "
"from ``NumModuleValues`` since they share the same namespace as module-"
"level values. The value enumerator resets after each function. When a "
"value is an operand of an instruction, the value ID is used to represent "
"the operand. For large functions or large modules, these operand values "
"can be large."
msgstr ""

#: ../../BitCodeFormat.rst:590
msgid ""
"The encoding in version 1 attempts to avoid large operand values in "
"common cases. Instead of using the value ID directly, operands are "
"encoded as relative to the current instruction. Thus, if an operand is "
"the value defined by the previous instruction, the operand will be "
"encoded as 1."
msgstr ""

#: ../../BitCodeFormat.rst:596
msgid "For example, instead of"
msgstr ""

#: ../../BitCodeFormat.rst:604
msgid "version 1 will encode the instructions as"
msgstr ""

#: ../../BitCodeFormat.rst:612
msgid ""
"Note in the example that operands which are constants also use the "
"relative encoding, while operands like basic block labels do not use the "
"relative encoding."
msgstr ""

#: ../../BitCodeFormat.rst:616
msgid ""
"Forward references will result in a negative value. This can be "
"inefficient, as operands are normally encoded as unsigned VBRs. However, "
"forward references are rare, except in the case of phi instructions. For "
"phi instructions, operands are encoded as `Signed VBRs`_ to deal with "
"forward references."
msgstr ""

#: ../../BitCodeFormat.rst:624
msgid "MODULE_CODE_TRIPLE Record"
msgstr ""

#: ../../BitCodeFormat.rst:626
msgid "``[TRIPLE, ...string...]``"
msgstr ""

#: ../../BitCodeFormat.rst:628
msgid ""
"The ``TRIPLE`` record (code 2) contains a variable number of values "
"representing the bytes of the ``target triple`` specification string."
msgstr ""

#: ../../BitCodeFormat.rst:632
msgid "MODULE_CODE_DATALAYOUT Record"
msgstr ""

#: ../../BitCodeFormat.rst:634
msgid "``[DATALAYOUT, ...string...]``"
msgstr ""

#: ../../BitCodeFormat.rst:636
msgid ""
"The ``DATALAYOUT`` record (code 3) contains a variable number of values "
"representing the bytes of the ``target datalayout`` specification string."
msgstr ""

#: ../../BitCodeFormat.rst:640
msgid "MODULE_CODE_ASM Record"
msgstr ""

#: ../../BitCodeFormat.rst:642
msgid "``[ASM, ...string...]``"
msgstr ""

#: ../../BitCodeFormat.rst:644
msgid ""
"The ``ASM`` record (code 4) contains a variable number of values "
"representing the bytes of ``module asm`` strings, with individual "
"assembly blocks separated by newline (ASCII 10) characters."
msgstr ""

#: ../../BitCodeFormat.rst:651
msgid "MODULE_CODE_SECTIONNAME Record"
msgstr ""

#: ../../BitCodeFormat.rst:653
msgid "``[SECTIONNAME, ...string...]``"
msgstr ""

#: ../../BitCodeFormat.rst:655
msgid ""
"The ``SECTIONNAME`` record (code 5) contains a variable number of values "
"representing the bytes of a single section name string. There should be "
"one ``SECTIONNAME`` record for each section name referenced (e.g., in "
"global variable or function ``section`` attributes) within the module. "
"These records can be referenced by the 1-based index in the *section* "
"fields of ``GLOBALVAR`` or ``FUNCTION`` records."
msgstr ""

#: ../../BitCodeFormat.rst:663
msgid "MODULE_CODE_DEPLIB Record"
msgstr ""

#: ../../BitCodeFormat.rst:665
msgid "``[DEPLIB, ...string...]``"
msgstr ""

#: ../../BitCodeFormat.rst:667
msgid ""
"The ``DEPLIB`` record (code 6) contains a variable number of values "
"representing the bytes of a single dependent library name string, one of "
"the libraries mentioned in a ``deplibs`` declaration.  There should be "
"one ``DEPLIB`` record for each library name referenced."
msgstr ""

#: ../../BitCodeFormat.rst:673
msgid "MODULE_CODE_GLOBALVAR Record"
msgstr ""

#: ../../BitCodeFormat.rst:675
msgid ""
"``[GLOBALVAR, pointer type, isconst, initid, linkage, alignment, section,"
" visibility, threadlocal, unnamed_addr, externally_initialized, "
"dllstorageclass, comdat]``"
msgstr ""

#: ../../BitCodeFormat.rst:677
msgid ""
"The ``GLOBALVAR`` record (code 7) marks the declaration or definition of "
"a global variable. The operand fields are:"
msgstr ""

#: ../../BitCodeFormat.rst:680
msgid ""
"*pointer type*: The type index of the pointer type used to point to this "
"global variable"
msgstr ""

#: ../../BitCodeFormat.rst:683
msgid ""
"*isconst*: Non-zero if the variable is treated as constant within the "
"module, or zero if it is not"
msgstr ""

#: ../../BitCodeFormat.rst:686
msgid ""
"*initid*: If non-zero, the value index of the initializer for this "
"variable, plus 1."
msgstr ""

#: ../../BitCodeFormat.rst:691
msgid ""
"*linkage*: An encoding of the linkage type for this variable: * "
"``external``: code 0 * ``weak``: code 1 * ``appending``: code 2 * "
"``internal``: code 3 * ``linkonce``: code 4 * ``dllimport``: code 5 * "
"``dllexport``: code 6 * ``extern_weak``: code 7 * ``common``: code 8 * "
"``private``: code 9 * ``weak_odr``: code 10 * ``linkonce_odr``: code 11 *"
" ``available_externally``: code 12 * deprecated : code 13 * deprecated : "
"code 14"
msgstr ""

#: ../../BitCodeFormat.rst:708
msgid ""
"alignment*: The logarithm base 2 of the variable's requested alignment, "
"plus 1"
msgstr ""

#: ../../BitCodeFormat.rst:710 ../../BitCodeFormat.rst:777
msgid ""
"*section*: If non-zero, the 1-based section index in the table of "
"`MODULE_CODE_SECTIONNAME`_ entries."
msgstr ""

#: ../../BitCodeFormat.rst:715
msgid ""
"*visibility*: If present, an encoding of the visibility of this variable:"
" * ``default``: code 0 * ``hidden``: code 1 * ``protected``: code 2"
msgstr ""

#: ../../BitCodeFormat.rst:720
msgid ""
"*threadlocal*: If present, an encoding of the thread local storage mode "
"of the variable: * ``not thread local``: code 0 * ``thread local; default"
" TLS model``: code 1 * ``localdynamic``: code 2 * ``initialexec``: code 3"
" * ``localexec``: code 4"
msgstr ""

#: ../../BitCodeFormat.rst:728
msgid ""
"*unnamed_addr*: If present and non-zero, indicates that the variable has "
"``unnamed_addr``"
msgstr ""

#: ../../BitCodeFormat.rst:733
msgid ""
"*dllstorageclass*: If present, an encoding of the DLL storage class of "
"this variable:"
msgstr ""

#: ../../BitCodeFormat.rst:735
msgid "``default``: code 0"
msgstr ""

#: ../../BitCodeFormat.rst:736
msgid "``dllimport``: code 1"
msgstr ""

#: ../../BitCodeFormat.rst:737
msgid "``dllexport``: code 2"
msgstr ""

#: ../../BitCodeFormat.rst:742
msgid "MODULE_CODE_FUNCTION Record"
msgstr ""

#: ../../BitCodeFormat.rst:744
msgid ""
"``[FUNCTION, type, callingconv, isproto, linkage, paramattr, alignment, "
"section, visibility, gc, prologuedata, dllstorageclass, comdat, "
"prefixdata, personalityfn]``"
msgstr ""

#: ../../BitCodeFormat.rst:746
msgid ""
"The ``FUNCTION`` record (code 8) marks the declaration or definition of a"
" function. The operand fields are:"
msgstr ""

#: ../../BitCodeFormat.rst:749
msgid "*type*: The type index of the function type describing this function"
msgstr ""

#: ../../BitCodeFormat.rst:751
msgid ""
"*callingconv*: The calling convention number: * ``ccc``: code 0 * "
"``fastcc``: code 8 * ``coldcc``: code 9 * ``webkit_jscc``: code 12 * "
"``anyregcc``: code 13 * ``preserve_mostcc``: code 14 * "
"``preserve_allcc``: code 15 * ``cxx_fast_tlscc``: code 17 * "
"``x86_stdcallcc``: code 64 * ``x86_fastcallcc``: code 65 * "
"``arm_apcscc``: code 66 * ``arm_aapcscc``: code 67 * ``arm_aapcs_vfpcc``:"
" code 68"
msgstr ""

#: ../../BitCodeFormat.rst:766
msgid ""
"isproto*: Non-zero if this entry represents a declaration rather than a "
"definition"
msgstr ""

#: ../../BitCodeFormat.rst:769
msgid "*linkage*: An encoding of the `linkage type`_ for this function"
msgstr ""

#: ../../BitCodeFormat.rst:771
msgid ""
"*paramattr*: If nonzero, the 1-based parameter attribute index into the "
"table of `PARAMATTR_CODE_ENTRY`_ entries."
msgstr ""

#: ../../BitCodeFormat.rst:774
msgid ""
"*alignment*: The logarithm base 2 of the function's requested alignment, "
"plus 1"
msgstr ""

#: ../../BitCodeFormat.rst:780
msgid "*visibility*: An encoding of the `visibility`_ of this function"
msgstr ""

#: ../../BitCodeFormat.rst:782
msgid ""
"*gc*: If present and nonzero, the 1-based garbage collector index in the "
"table of `MODULE_CODE_GCNAME`_ entries."
msgstr ""

#: ../../BitCodeFormat.rst:785
msgid ""
"*unnamed_addr*: If present and non-zero, indicates that the function has "
"``unnamed_addr``"
msgstr ""

#: ../../BitCodeFormat.rst:788
msgid ""
"*prologuedata*: If non-zero, the value index of the prologue data for "
"this function, plus 1."
msgstr ""

#: ../../BitCodeFormat.rst:791
msgid ""
"*dllstorageclass*: An encoding of the "
":ref:`dllstorageclass<bcdllstorageclass>` of this function"
msgstr ""

#: ../../BitCodeFormat.rst:794
msgid "*comdat*: An encoding of the COMDAT of this function"
msgstr ""

#: ../../BitCodeFormat.rst:796
msgid ""
"*prefixdata*: If non-zero, the value index of the prefix data for this "
"function, plus 1."
msgstr ""

#: ../../BitCodeFormat.rst:799
msgid ""
"*personalityfn*: If non-zero, the value index of the personality function"
" for this function, plus 1."
msgstr ""

#: ../../BitCodeFormat.rst:803
msgid "MODULE_CODE_ALIAS Record"
msgstr ""

#: ../../BitCodeFormat.rst:805
msgid ""
"``[ALIAS, alias type, aliasee val#, linkage, visibility, "
"dllstorageclass]``"
msgstr ""

#: ../../BitCodeFormat.rst:807
msgid ""
"The ``ALIAS`` record (code 9) marks the definition of an alias. The "
"operand fields are"
msgstr ""

#: ../../BitCodeFormat.rst:810
msgid "*alias type*: The type index of the alias"
msgstr ""

#: ../../BitCodeFormat.rst:812
msgid "*aliasee val#*: The value index of the aliased value"
msgstr ""

#: ../../BitCodeFormat.rst:814
msgid "*linkage*: An encoding of the `linkage type`_ for this alias"
msgstr ""

#: ../../BitCodeFormat.rst:816
msgid "*visibility*: If present, an encoding of the `visibility`_ of the alias"
msgstr ""

#: ../../BitCodeFormat.rst:818
msgid ""
"*dllstorageclass*: If present, an encoding of the "
":ref:`dllstorageclass<bcdllstorageclass>` of the alias"
msgstr ""

#: ../../BitCodeFormat.rst:822
msgid "MODULE_CODE_PURGEVALS Record"
msgstr ""

#: ../../BitCodeFormat.rst:824
msgid "``[PURGEVALS, numvals]``"
msgstr ""

#: ../../BitCodeFormat.rst:826
msgid ""
"The ``PURGEVALS`` record (code 10) resets the module-level value list to "
"the size given by the single operand value. Module-level value list items"
" are added by ``GLOBALVAR``, ``FUNCTION``, and ``ALIAS`` records.  After "
"a ``PURGEVALS`` record is seen, new value indices will start from the "
"given *numvals* value."
msgstr ""

#: ../../BitCodeFormat.rst:834
msgid "MODULE_CODE_GCNAME Record"
msgstr ""

#: ../../BitCodeFormat.rst:836
msgid "``[GCNAME, ...string...]``"
msgstr ""

#: ../../BitCodeFormat.rst:838
msgid ""
"The ``GCNAME`` record (code 11) contains a variable number of values "
"representing the bytes of a single garbage collector name string. There "
"should be one ``GCNAME`` record for each garbage collector name "
"referenced in function ``gc`` attributes within the module. These records"
" can be referenced by 1-based index in the *gc* fields of ``FUNCTION`` "
"records."
msgstr ""

#: ../../BitCodeFormat.rst:847
msgid "PARAMATTR_BLOCK Contents"
msgstr ""

#: ../../BitCodeFormat.rst:849
msgid ""
"The ``PARAMATTR_BLOCK`` block (id 9) contains a table of entries "
"describing the attributes of function parameters. These entries are "
"referenced by 1-based index in the *paramattr* field of module block "
"`FUNCTION`_ records, or within the *attr* field of function block "
"``INST_INVOKE`` and ``INST_CALL`` records."
msgstr ""

#: ../../BitCodeFormat.rst:854
msgid ""
"Entries within ``PARAMATTR_BLOCK`` are constructed to ensure that each is"
" unique (i.e., no two indices represent equivalent attribute lists)."
msgstr ""

#: ../../BitCodeFormat.rst:860
msgid "PARAMATTR_CODE_ENTRY Record"
msgstr ""

#: ../../BitCodeFormat.rst:862
msgid "``[ENTRY, paramidx0, attr0, paramidx1, attr1...]``"
msgstr ""

#: ../../BitCodeFormat.rst:864
msgid ""
"The ``ENTRY`` record (code 1) contains an even number of values "
"describing a unique set of function parameter attributes. Each *paramidx*"
" value indicates which set of attributes is represented, with 0 "
"representing the return value attributes, 0xFFFFFFFF representing "
"function attributes, and other values representing 1-based function "
"parameters. Each *attr* value is a bitmap with the following "
"interpretation:"
msgstr ""

#: ../../BitCodeFormat.rst:871
msgid "bit 0: ``zeroext``"
msgstr ""

#: ../../BitCodeFormat.rst:872
msgid "bit 1: ``signext``"
msgstr ""

#: ../../BitCodeFormat.rst:873
msgid "bit 2: ``noreturn``"
msgstr ""

#: ../../BitCodeFormat.rst:874
msgid "bit 3: ``inreg``"
msgstr ""

#: ../../BitCodeFormat.rst:875
msgid "bit 4: ``sret``"
msgstr ""

#: ../../BitCodeFormat.rst:876
msgid "bit 5: ``nounwind``"
msgstr ""

#: ../../BitCodeFormat.rst:877
msgid "bit 6: ``noalias``"
msgstr ""

#: ../../BitCodeFormat.rst:878
msgid "bit 7: ``byval``"
msgstr ""

#: ../../BitCodeFormat.rst:879
msgid "bit 8: ``nest``"
msgstr ""

#: ../../BitCodeFormat.rst:880
msgid "bit 9: ``readnone``"
msgstr ""

#: ../../BitCodeFormat.rst:881
msgid "bit 10: ``readonly``"
msgstr ""

#: ../../BitCodeFormat.rst:882
msgid "bit 11: ``noinline``"
msgstr ""

#: ../../BitCodeFormat.rst:883
msgid "bit 12: ``alwaysinline``"
msgstr ""

#: ../../BitCodeFormat.rst:884
msgid "bit 13: ``optsize``"
msgstr ""

#: ../../BitCodeFormat.rst:885
msgid "bit 14: ``ssp``"
msgstr ""

#: ../../BitCodeFormat.rst:886
msgid "bit 15: ``sspreq``"
msgstr ""

#: ../../BitCodeFormat.rst:887
msgid "bits 16-31: ``align n``"
msgstr ""

#: ../../BitCodeFormat.rst:888
msgid "bit 32: ``nocapture``"
msgstr ""

#: ../../BitCodeFormat.rst:889
msgid "bit 33: ``noredzone``"
msgstr ""

#: ../../BitCodeFormat.rst:890
msgid "bit 34: ``noimplicitfloat``"
msgstr ""

#: ../../BitCodeFormat.rst:891
msgid "bit 35: ``naked``"
msgstr ""

#: ../../BitCodeFormat.rst:892
msgid "bit 36: ``inlinehint``"
msgstr ""

#: ../../BitCodeFormat.rst:893
msgid ""
"bits 37-39: ``alignstack n``, represented as the logarithm base 2 of the "
"requested alignment, plus 1"
msgstr ""

#: ../../BitCodeFormat.rst:899
msgid "TYPE_BLOCK Contents"
msgstr ""

#: ../../BitCodeFormat.rst:901
msgid ""
"The ``TYPE_BLOCK`` block (id 10) contains records which constitute a "
"table of type operator entries used to represent types referenced within "
"an LLVM module. Each record (with the exception of `NUMENTRY`_) generates"
" a single type table entry, which may be referenced by 0-based index from"
" instructions, constants, metadata, type symbol table entries, or other "
"type operator records."
msgstr ""

#: ../../BitCodeFormat.rst:907
msgid ""
"Entries within ``TYPE_BLOCK`` are constructed to ensure that each entry "
"is unique (i.e., no two indices represent structurally equivalent types)."
msgstr ""

#: ../../BitCodeFormat.rst:914
msgid "TYPE_CODE_NUMENTRY Record"
msgstr ""

#: ../../BitCodeFormat.rst:916
msgid "``[NUMENTRY, numentries]``"
msgstr ""

#: ../../BitCodeFormat.rst:918
msgid ""
"The ``NUMENTRY`` record (code 1) contains a single value which indicates "
"the total number of type code entries in the type table of the module. If"
" present, ``NUMENTRY`` should be the first record in the block."
msgstr ""

#: ../../BitCodeFormat.rst:923
msgid "TYPE_CODE_VOID Record"
msgstr ""

#: ../../BitCodeFormat.rst:925
msgid "``[VOID]``"
msgstr ""

#: ../../BitCodeFormat.rst:927
msgid "The ``VOID`` record (code 2) adds a ``void`` type to the type table."
msgstr ""

#: ../../BitCodeFormat.rst:930
msgid "TYPE_CODE_HALF Record"
msgstr ""

#: ../../BitCodeFormat.rst:932
msgid "``[HALF]``"
msgstr ""

#: ../../BitCodeFormat.rst:934
msgid ""
"The ``HALF`` record (code 10) adds a ``half`` (16-bit floating point) "
"type to the type table."
msgstr ""

#: ../../BitCodeFormat.rst:938
msgid "TYPE_CODE_FLOAT Record"
msgstr ""

#: ../../BitCodeFormat.rst:940
msgid "``[FLOAT]``"
msgstr ""

#: ../../BitCodeFormat.rst:942
msgid ""
"The ``FLOAT`` record (code 3) adds a ``float`` (32-bit floating point) "
"type to the type table."
msgstr ""

#: ../../BitCodeFormat.rst:946
msgid "TYPE_CODE_DOUBLE Record"
msgstr ""

#: ../../BitCodeFormat.rst:948
msgid "``[DOUBLE]``"
msgstr ""

#: ../../BitCodeFormat.rst:950
msgid ""
"The ``DOUBLE`` record (code 4) adds a ``double`` (64-bit floating point) "
"type to the type table."
msgstr ""

#: ../../BitCodeFormat.rst:954
msgid "TYPE_CODE_LABEL Record"
msgstr ""

#: ../../BitCodeFormat.rst:956
msgid "``[LABEL]``"
msgstr ""

#: ../../BitCodeFormat.rst:958
msgid "The ``LABEL`` record (code 5) adds a ``label`` type to the type table."
msgstr ""

#: ../../BitCodeFormat.rst:961
msgid "TYPE_CODE_OPAQUE Record"
msgstr ""

#: ../../BitCodeFormat.rst:963
msgid "``[OPAQUE]``"
msgstr ""

#: ../../BitCodeFormat.rst:965
msgid ""
"The ``OPAQUE`` record (code 6) adds an ``opaque`` type to the type table."
" Note that distinct ``opaque`` types are not unified."
msgstr ""

#: ../../BitCodeFormat.rst:969
msgid "TYPE_CODE_INTEGER Record"
msgstr ""

#: ../../BitCodeFormat.rst:971
msgid "``[INTEGER, width]``"
msgstr ""

#: ../../BitCodeFormat.rst:973
msgid ""
"The ``INTEGER`` record (code 7) adds an integer type to the type table. "
"The single *width* field indicates the width of the integer type."
msgstr ""

#: ../../BitCodeFormat.rst:977
msgid "TYPE_CODE_POINTER Record"
msgstr ""

#: ../../BitCodeFormat.rst:979
msgid "``[POINTER, pointee type, address space]``"
msgstr ""

#: ../../BitCodeFormat.rst:981
msgid ""
"The ``POINTER`` record (code 8) adds a pointer type to the type table. "
"The operand fields are"
msgstr ""

#: ../../BitCodeFormat.rst:984
msgid "*pointee type*: The type index of the pointed-to type"
msgstr ""

#: ../../BitCodeFormat.rst:986
msgid ""
"*address space*: If supplied, the target-specific numbered address space "
"where the pointed-to object resides. Otherwise, the default address space"
" is zero."
msgstr ""

#: ../../BitCodeFormat.rst:990
msgid "TYPE_CODE_FUNCTION Record"
msgstr ""

#: ../../BitCodeFormat.rst:992
msgid "``[FUNCTION, vararg, ignored, retty, ...paramty... ]``"
msgstr ""

#: ../../BitCodeFormat.rst:994
msgid ""
"The ``FUNCTION`` record (code 9) adds a function type to the type table. "
"The operand fields are"
msgstr ""

#: ../../BitCodeFormat.rst:997
msgid "*vararg*: Non-zero if the type represents a varargs function"
msgstr ""

#: ../../BitCodeFormat.rst:999
msgid ""
"*ignored*: This value field is present for backward compatibility only, "
"and is ignored"
msgstr ""

#: ../../BitCodeFormat.rst:1002
msgid "*retty*: The type index of the function's return type"
msgstr ""

#: ../../BitCodeFormat.rst:1004
msgid ""
"*paramty*: Zero or more type indices representing the parameter types of "
"the function"
msgstr ""

#: ../../BitCodeFormat.rst:1008
msgid "TYPE_CODE_STRUCT Record"
msgstr ""

#: ../../BitCodeFormat.rst:1010
msgid "``[STRUCT, ispacked, ...eltty...]``"
msgstr ""

#: ../../BitCodeFormat.rst:1012
msgid ""
"The ``STRUCT`` record (code 10) adds a struct type to the type table. The"
" operand fields are"
msgstr ""

#: ../../BitCodeFormat.rst:1015
msgid "*ispacked*: Non-zero if the type represents a packed structure"
msgstr ""

#: ../../BitCodeFormat.rst:1017
msgid ""
"*eltty*: Zero or more type indices representing the element types of the "
"structure"
msgstr ""

#: ../../BitCodeFormat.rst:1021
msgid "TYPE_CODE_ARRAY Record"
msgstr ""

#: ../../BitCodeFormat.rst:1023
msgid "``[ARRAY, numelts, eltty]``"
msgstr ""

#: ../../BitCodeFormat.rst:1025
msgid ""
"The ``ARRAY`` record (code 11) adds an array type to the type table.  The"
" operand fields are"
msgstr ""

#: ../../BitCodeFormat.rst:1028
msgid "*numelts*: The number of elements in arrays of this type"
msgstr ""

#: ../../BitCodeFormat.rst:1030
msgid "*eltty*: The type index of the array element type"
msgstr ""

#: ../../BitCodeFormat.rst:1033
msgid "TYPE_CODE_VECTOR Record"
msgstr ""

#: ../../BitCodeFormat.rst:1035
msgid "``[VECTOR, numelts, eltty]``"
msgstr ""

#: ../../BitCodeFormat.rst:1037
msgid ""
"The ``VECTOR`` record (code 12) adds a vector type to the type table.  "
"The operand fields are"
msgstr ""

#: ../../BitCodeFormat.rst:1040
msgid "*numelts*: The number of elements in vectors of this type"
msgstr ""

#: ../../BitCodeFormat.rst:1042
msgid "*eltty*: The type index of the vector element type"
msgstr ""

#: ../../BitCodeFormat.rst:1045
msgid "TYPE_CODE_X86_FP80 Record"
msgstr ""

#: ../../BitCodeFormat.rst:1047
msgid "``[X86_FP80]``"
msgstr ""

#: ../../BitCodeFormat.rst:1049
msgid ""
"The ``X86_FP80`` record (code 13) adds an ``x86_fp80`` (80-bit floating "
"point) type to the type table."
msgstr ""

#: ../../BitCodeFormat.rst:1053
msgid "TYPE_CODE_FP128 Record"
msgstr ""

#: ../../BitCodeFormat.rst:1055
msgid "``[FP128]``"
msgstr ""

#: ../../BitCodeFormat.rst:1057
msgid ""
"The ``FP128`` record (code 14) adds an ``fp128`` (128-bit floating point)"
" type to the type table."
msgstr ""

#: ../../BitCodeFormat.rst:1061
msgid "TYPE_CODE_PPC_FP128 Record"
msgstr ""

#: ../../BitCodeFormat.rst:1063
msgid "``[PPC_FP128]``"
msgstr ""

#: ../../BitCodeFormat.rst:1065
msgid ""
"The ``PPC_FP128`` record (code 15) adds a ``ppc_fp128`` (128-bit floating"
" point) type to the type table."
msgstr ""

#: ../../BitCodeFormat.rst:1069
msgid "TYPE_CODE_METADATA Record"
msgstr ""

#: ../../BitCodeFormat.rst:1071
msgid "``[METADATA]``"
msgstr ""

#: ../../BitCodeFormat.rst:1073
msgid ""
"The ``METADATA`` record (code 16) adds a ``metadata`` type to the type "
"table."
msgstr ""

#: ../../BitCodeFormat.rst:1078
msgid "CONSTANTS_BLOCK Contents"
msgstr ""

#: ../../BitCodeFormat.rst:1080
msgid "The ``CONSTANTS_BLOCK`` block (id 11) ..."
msgstr ""

#: ../../BitCodeFormat.rst:1085
msgid "FUNCTION_BLOCK Contents"
msgstr ""

#: ../../BitCodeFormat.rst:1087
msgid "The ``FUNCTION_BLOCK`` block (id 12) ..."
msgstr ""

#: ../../BitCodeFormat.rst:1089
msgid ""
"In addition to the record types described below, a ``FUNCTION_BLOCK`` "
"block may contain the following sub-blocks:"
msgstr ""

#: ../../BitCodeFormat.rst:1094
msgid "`METADATA_ATTACHMENT`_"
msgstr ""

#: ../../BitCodeFormat.rst:1099
msgid "TYPE_SYMTAB_BLOCK Contents"
msgstr ""

#: ../../BitCodeFormat.rst:1101
msgid ""
"The ``TYPE_SYMTAB_BLOCK`` block (id 13) contains entries which map "
"between module-level named types and their corresponding type indices."
msgstr ""

#: ../../BitCodeFormat.rst:1107
msgid "TST_CODE_ENTRY Record"
msgstr ""

#: ../../BitCodeFormat.rst:1109
msgid "``[ENTRY, typeid, ...string...]``"
msgstr ""

#: ../../BitCodeFormat.rst:1111
msgid ""
"The ``ENTRY`` record (code 1) contains a variable number of values, with "
"the first giving the type index of the designated type, and the remaining"
" values giving the character codes of the type name. Each entry "
"corresponds to a single named type."
msgstr ""

#: ../../BitCodeFormat.rst:1119
msgid "VALUE_SYMTAB_BLOCK Contents"
msgstr ""

#: ../../BitCodeFormat.rst:1121
msgid "The ``VALUE_SYMTAB_BLOCK`` block (id 14) ..."
msgstr ""

#: ../../BitCodeFormat.rst:1126
msgid "METADATA_BLOCK Contents"
msgstr ""

#: ../../BitCodeFormat.rst:1128
msgid "The ``METADATA_BLOCK`` block (id 15) ..."
msgstr ""

#: ../../BitCodeFormat.rst:1133
msgid "METADATA_ATTACHMENT Contents"
msgstr ""

#: ../../BitCodeFormat.rst:1135
msgid "The ``METADATA_ATTACHMENT`` block (id 16) ..."
msgstr ""

