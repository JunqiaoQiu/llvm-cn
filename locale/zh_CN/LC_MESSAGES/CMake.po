# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2016, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-17 11:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../CMake.rst:3
msgid "Building LLVM with CMake"
msgstr "使用CMake构建LLVM系统"

#: ../../CMake.rst:9
msgid "Introduction"
msgstr "简介"

#: ../../CMake.rst:11
msgid ""
"`CMake <http://www.cmake.org/>`_ is a cross-platform build-generator "
"tool. CMake does not build the project, it generates the files needed by "
"your build tool (GNU make, Visual Studio, etc.) for building LLVM."
msgstr "`CMake <http://www.cmake.org/>`_ 是一款跨平台构建生成系统。虽然CMake本身并不负责项目构建，但它能够生成"
"其他构建工具 (例如 GNU make, Visual Studio 等) 必要的配置项，来构建LLVM。"

#: ../../CMake.rst:15
msgid ""
"If you are really anxious about getting a functional LLVM build, go to "
"the `Quick start`_ section. If you are a CMake novice, start with `Basic "
"CMake usage`_ and then go back to the `Quick start`_ section once you "
"know what you are doing. The `Options and variables`_ section is a "
"reference for customizing your build. If you already have experience with"
" CMake, this is the recommended starting point."
msgstr ""
"如果您担心没法顺利构建一个实用的LLVM系统，请先阅读 `Quick start`_ 一节。"
"如果您从未使用过CMake构建工具，请先从 `Basic CMake usage`_ 开始读起，然后阅读 `Quick start`_ 一节。"
"`Options and variables`_ 一节是一份自定义构建的参考，您可以获取如何定制化构建LLVM的相关信息。"
"如果您已经很熟悉CMake构建工具，那么推荐您直接阅读 `Options and variables`_ 一节。"

#: ../../CMake.rst:24
msgid "Quick start"
msgstr "快速入门"

#: ../../CMake.rst:26
msgid "We use here the command-line, non-interactive CMake interface."
msgstr "我们将使用CMake的命令行工具，而非GUI接口。"

#: ../../CMake.rst:28
msgid ""
"`Download <http://www.cmake.org/cmake/resources/software.html>`_ and "
"install CMake. Version 2.8.8 is the minimum required, but if you're using"
" the Ninja backend, CMake v3.2 or newer is required to `get interactive "
"output <http://lists.llvm.org/pipermail/llvm-commits/Week-of-"
"Mon-20141117/244797.html>`_ when running :doc:`Lit <CommandGuide/lit>`."
msgstr ""
"首先下载 `Download <http://www.cmake.org/cmake/resources/software.html>`_  并安装CMake工具。"
"最低可用版本是 2.8.8, 但如果您还使用Ninja构建工具，则必须使用 CMake v3.2或更新版本，才能在运行  :doc:`Lit <CommandGuide/lit>` 时得到 "
"`交互式输出 <http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20141117/244797.html>`_ 。"
"（译者注：ninja构建工具是一套快速构建C/C++项目的构建套件，类似于GNU Make，对于LLVM这类代码量大的项目，相比make能够明显提升构建速度。使用时只需将CMake的生成目标设定为ninja即可。"
"命令为：cmake -G \"Ninja\ path/to/llvm/source）" 

#: ../../CMake.rst:34
msgid ""
"Open a shell. Your development tools must be reachable from this shell "
"through the PATH environment variable."
msgstr ""
"打开命令行。您的开发工具必须能从该命令行中访问到，换言之，应该将工具链添加到PATH路径中。"


#: ../../CMake.rst:37
msgid ""
"Create a build directory. Building LLVM in the source directory is not "
"supported. cd to this directory:"
msgstr ""
"创建一个build文件夹。在源码路径中构建LLVM是不支持的， 需要先cd到这个构建目录中。"

#: ../../CMake.rst:45
msgid ""
"Execute this command in the shell replacing `path/to/llvm/source/root` "
"with the path to the root of your LLVM source tree:"
msgstr ""
"执行这行命令时，请把 `path/to/llvm/source/root` 换成您真正的llvm源码所在的目录，相对目录或绝对目录均可。"

#: ../../CMake.rst:52
msgid ""
"CMake will detect your development environment, perform a series of "
"tests, and generate the files required for building LLVM. CMake will use "
"default values for all build parameters. See the `Options and variables`_"
" section for a list of build parameters that you can modify."
msgstr ""
"CMake 会自动检查您的开发环境，执行一系列测试命令，最终生成必要的配置文件来构建LLVM。"
"CMake 会自动使用默认的构建参数，请阅读 `Options and variables`_ 一节来了解哪些构建参数是您可以修改的。"

#: ../../CMake.rst:57
msgid ""
"This can fail if CMake can't detect your toolset, or if it thinks that "
"the environment is not sane enough. In this case, make sure that the "
"toolset that you intend to use is the only one reachable from the shell, "
"and that the shell itself is the correct one for your development "
"environment. CMake will refuse to build MinGW makefiles if you have a "
"POSIX shell reachable through the PATH environment variable, for "
"instance. You can force CMake to use a given build tool; for "
"instructions, see the `Usage`_ section, below."
msgstr ""
"如果CMake无法找到您的开发工具链或者它认为此套工具并不健全，目前的命令可能会运行失败。"
"在这种情况下，请确保CMake找到的工具链是您希望让其使用的，并且是当前shell环境唯一能访问的到的（例如，请不要给不同版本的gcc设置相同的名字，并且全部放到PATH路径下）。"
"并且确保使用适合的shell来访问您目前想用的开发环境。（例如，如果您使用一个POSIX shell来访问MinGW工具，CMake会拒绝构建MinGW makefile）。"
"您可以为CMake强制指定一套工具，具体请阅读下面 `Usage`_ 一节。"


#: ../../CMake.rst:65
msgid ""
"After CMake has finished running, proceed to use IDE project files, or "
"start the build from the build directory:"
msgstr ""
"CMake 运行结束后，将会生成Makefile或IDE project配置，对于IDE支持的配置，您可以选择打开它并在IDE中构建，或者继续使用命令行直接构建。"

#: ../../CMake.rst:72
msgid ""
"The ``--build`` option tells ``cmake`` to invoke the underlying build "
"tool (``make``, ``ninja``, ``xcodebuild``, ``msbuild``, etc.)"
msgstr ""
"使用 ``--build`` 参数，可以让CMake直接调用构建工具（``make`` GNU Makefile, ``ninja`` Ninja构建系统, ``xcodebuild`` XCode工具链, ``msbuild`` Visual Studio工具链 这类指令）来直接构建项目。"


#: ../../CMake.rst:75
msgid ""
"The underlying build tool can be invoked directly, of course, but the "
"``--build`` option is portable."
msgstr ""
"刚才列出的这些构建工具也可以直接调用，但``--build``可以在任何情况下使用，更具可移植性。"

#: ../../CMake.rst:78
msgid "After LLVM has finished building, install it from the build directory:"
msgstr "在LLVM构建完成后，你可以直接从构建目录安装构建好的代码库和工具到您的系统里。"

#: ../../CMake.rst:84
msgid ""
"The ``--target`` option with ``install`` parameter in addition to the "
"``--build`` option tells ``cmake`` to build the ``install`` target."
msgstr ""
"``--target`` 选项可以指定构建目标，其中 ``install`` 构建目标就是用来安装项目的。"

#: ../../CMake.rst:87
msgid ""
"It is possible to set a different install prefix at installation time by "
"invoking the ``cmake_install.cmake`` script generated in the build "
"directory:"
msgstr ""
"您可以在安装时指定一个不同的安装路径，通过调用刚刚生成的 ``cmake_install.cmake`` 脚本。"


#: ../../CMake.rst:99
msgid "Basic CMake usage"
msgstr "CMake基本用法"

#: ../../CMake.rst:101
msgid ""
"This section explains basic aspects of CMake which you may need in your "
"day-to-day usage."
msgstr ""
"这一节主要讲解了Cmake的基本使用方法，以及最常用的指令。"


#: ../../CMake.rst:104
msgid ""
"CMake comes with extensive documentation, in the form of html files, and "
"as online help accessible via the ``cmake`` executable itself. Execute "
"``cmake --help`` for further help options."
msgstr ""

#: ../../CMake.rst:108
msgid ""
"CMake allows you to specify a build tool (e.g., GNU make, Visual Studio, "
"or Xcode). If not specified on the command line, CMake tries to guess "
"which build tool to use, based on your environment. Once it has "
"identified your build tool, CMake uses the corresponding *Generator* to "
"create files for your build tool (e.g., Makefiles or Visual Studio or "
"Xcode project files). You can explicitly specify the generator with the "
"command line option ``-G \"Name of the generator\"``. To see a list of "
"the available generators on your system, execute"
msgstr ""

#: ../../CMake.rst:120
msgid "This will list the generator names at the end of the help text."
msgstr ""

#: ../../CMake.rst:122
msgid ""
"Generators' names are case-sensitive, and may contain spaces. For this "
"reason, you should enter them exactly as they are listed in the ``cmake "
"--help`` output, in quotes. For example, to generate project files "
"specifically for Visual Studio 12, you can execute:"
msgstr ""

#: ../../CMake.rst:131
msgid ""
"For a given development platform there can be more than one adequate "
"generator. If you use Visual Studio, \"NMake Makefiles\" is a generator "
"you can use for building with NMake. By default, CMake chooses the most "
"specific generator supported by your development environment. If you want"
" an alternative generator, you must tell this to CMake with the ``-G`` "
"option."
msgstr ""

#: ../../CMake.rst:144
msgid "Options and variables"
msgstr ""

#: ../../CMake.rst:146
msgid ""
"Variables customize how the build will be generated. Options are boolean "
"variables, with possible values ON/OFF. Options and variables are defined"
" on the CMake command line like this:"
msgstr ""

#: ../../CMake.rst:154
msgid ""
"You can set a variable after the initial CMake invocation to change its "
"value. You can also undefine a variable:"
msgstr ""

#: ../../CMake.rst:161
msgid ""
"Variables are stored in the CMake cache. This is a file named "
"``CMakeCache.txt`` stored at the root of your build directory that is "
"generated by ``cmake``. Editing it yourself is not recommended."
msgstr ""

#: ../../CMake.rst:165
msgid ""
"Variables are listed in the CMake cache and later in this document with "
"the variable name and type separated by a colon. You can also specify the"
" variable and type on the CMake command line:"
msgstr ""

#: ../../CMake.rst:174
msgid "Frequently-used CMake variables"
msgstr ""

#: ../../CMake.rst:176
msgid ""
"Here are some of the CMake variables that are used often, along with a "
"brief explanation and LLVM-specific notes. For full documentation, "
"consult the CMake manual, or execute ``cmake --help-variable "
"VARIABLE_NAME``."
msgstr ""

#: ../../CMake.rst:183
msgid "**CMAKE_BUILD_TYPE**:STRING"
msgstr ""

#: ../../CMake.rst:181
msgid ""
"Sets the build type for ``make``-based generators. Possible values are "
"Release, Debug, RelWithDebInfo and MinSizeRel. If you are using an IDE "
"such as Visual Studio, you should use the IDE settings to set the build "
"type."
msgstr ""

#: ../../CMake.rst:187
msgid "**CMAKE_INSTALL_PREFIX**:PATH"
msgstr ""

#: ../../CMake.rst:186
msgid ""
"Path where LLVM will be installed if \"make install\" is invoked or the "
"\"install\" target is built."
msgstr ""

#: ../../CMake.rst:192
msgid "**LLVM_LIBDIR_SUFFIX**:STRING"
msgstr ""

#: ../../CMake.rst:190
msgid ""
"Extra suffix to append to the directory where libraries are to be "
"installed. On a 64-bit architecture, one could use "
"``-DLLVM_LIBDIR_SUFFIX=64`` to install libraries to ``/usr/lib64``."
msgstr ""

#: ../../CMake.rst:195
msgid "**CMAKE_C_FLAGS**:STRING"
msgstr ""

#: ../../CMake.rst:195
msgid "Extra flags to use when compiling C source files."
msgstr ""

#: ../../CMake.rst:198
msgid "**CMAKE_CXX_FLAGS**:STRING"
msgstr ""

#: ../../CMake.rst:198
msgid "Extra flags to use when compiling C++ source files."
msgstr ""

#: ../../CMake.rst:203
msgid "LLVM-specific variables"
msgstr ""

#: ../../CMake.rst:208
msgid "**LLVM_TARGETS_TO_BUILD**:STRING"
msgstr ""

#: ../../CMake.rst:206
msgid ""
"Semicolon-separated list of targets to build, or *all* for building all "
"targets. Case-sensitive. Defaults to *all*. Example: "
"``-DLLVM_TARGETS_TO_BUILD=\"X86;PowerPC\"``."
msgstr ""

#: ../../CMake.rst:214
msgid "**LLVM_BUILD_TOOLS**:BOOL"
msgstr ""

#: ../../CMake.rst:211
msgid ""
"Build LLVM tools. Defaults to ON. Targets for building each tool are "
"generated in any case. You can build a tool separately by invoking its "
"target. For example, you can build *llvm-as* with a Makefile-based system"
" by executing *make llvm-as* at the root of your build directory."
msgstr ""

#: ../../CMake.rst:218
msgid "**LLVM_INCLUDE_TOOLS**:BOOL"
msgstr ""

#: ../../CMake.rst:217
msgid ""
"Generate build targets for the LLVM tools. Defaults to ON. You can use "
"this option to disable the generation of build targets for the LLVM "
"tools."
msgstr ""

#: ../../CMake.rst:223
msgid "**LLVM_BUILD_EXAMPLES**:BOOL"
msgstr ""

#: ../../CMake.rst:221
msgid ""
"Build LLVM examples. Defaults to OFF. Targets for building each example "
"are generated in any case. See documentation for *LLVM_BUILD_TOOLS* above"
" for more details."
msgstr ""

#: ../../CMake.rst:227
msgid "**LLVM_INCLUDE_EXAMPLES**:BOOL"
msgstr ""

#: ../../CMake.rst:226
msgid ""
"Generate build targets for the LLVM examples. Defaults to ON. You can use"
" this option to disable the generation of build targets for the LLVM "
"examples."
msgstr ""

#: ../../CMake.rst:235
msgid "**LLVM_BUILD_TESTS**:BOOL"
msgstr ""

#: ../../CMake.rst:230
msgid ""
"Build LLVM unit tests. Defaults to OFF. Targets for building each unit "
"test are generated in any case. You can build a specific unit test using "
"the targets defined under *unittests*, such as ADTTests, IRTests, "
"SupportTests, etc. (Search for ``add_llvm_unittest`` in the "
"subdirectories of *unittests* for a complete list of unit tests.) It is "
"possible to build all unit tests with the target *UnitTests*."
msgstr ""

#: ../../CMake.rst:240
msgid "**LLVM_INCLUDE_TESTS**:BOOL"
msgstr ""

#: ../../CMake.rst:238
msgid ""
"Generate build targets for the LLVM unit tests. Defaults to ON. You can "
"use this option to disable the generation of build targets for the LLVM "
"unit tests."
msgstr ""

#: ../../CMake.rst:245
msgid "**LLVM_APPEND_VC_REV**:BOOL"
msgstr ""

#: ../../CMake.rst:243
msgid ""
"Append version control revision info (svn revision number or Git revision"
" id) to LLVM version string (stored in the PACKAGE_VERSION macro). For "
"this to work cmake must be invoked before the build. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:248
msgid "**LLVM_ENABLE_THREADS**:BOOL"
msgstr ""

#: ../../CMake.rst:248
msgid "Build with threads support, if available. Defaults to ON."
msgstr ""

#: ../../CMake.rst:251
msgid "**LLVM_ENABLE_CXX1Y**:BOOL"
msgstr ""

#: ../../CMake.rst:251
msgid "Build in C++1y mode, if available. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:255
msgid "**LLVM_ENABLE_ASSERTIONS**:BOOL"
msgstr ""

#: ../../CMake.rst:254
msgid ""
"Enables code assertions. Defaults to ON if and only if "
"``CMAKE_BUILD_TYPE`` is *Debug*."
msgstr ""

#: ../../CMake.rst:260
msgid "**LLVM_ENABLE_EH**:BOOL"
msgstr ""

#: ../../CMake.rst:258
msgid ""
"Build LLVM with exception-handling support. This is necessary if you wish"
" to link against LLVM libraries and make use of C++ exceptions in your "
"own code that need to propagate through LLVM code. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:264
msgid "**LLVM_ENABLE_PIC**:BOOL"
msgstr ""

#: ../../CMake.rst:263
msgid ""
"Add the ``-fPIC`` flag to the compiler command-line, if the compiler "
"supports this flag. Some systems, like Windows, do not need this flag. "
"Defaults to ON."
msgstr ""

#: ../../CMake.rst:267
msgid "**LLVM_ENABLE_RTTI**:BOOL"
msgstr ""

#: ../../CMake.rst:267
msgid "Build LLVM with run-time type information. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:270
msgid "**LLVM_ENABLE_WARNINGS**:BOOL"
msgstr ""

#: ../../CMake.rst:270
msgid "Enable all compiler warnings. Defaults to ON."
msgstr ""

#: ../../CMake.rst:274
msgid "**LLVM_ENABLE_PEDANTIC**:BOOL"
msgstr ""

#: ../../CMake.rst:273
msgid ""
"Enable pedantic mode. This disables compiler-specific extensions, if "
"possible. Defaults to ON."
msgstr ""

#: ../../CMake.rst:277
msgid "**LLVM_ENABLE_WERROR**:BOOL"
msgstr ""

#: ../../CMake.rst:277
msgid ""
"Stop and fail the build, if a compiler warning is triggered. Defaults to "
"OFF."
msgstr ""

#: ../../CMake.rst:286
msgid "**LLVM_ABI_BREAKING_CHECKS**:STRING"
msgstr ""

#: ../../CMake.rst:280
msgid ""
"Used to decide if LLVM should be built with ABI breaking checks or not.  "
"Allowed values are `WITH_ASSERTS` (default), `FORCE_ON` and `FORCE_OFF`."
"  `WITH_ASSERTS` turns on ABI breaking checks in an assertion enabled "
"build.  `FORCE_ON` (`FORCE_OFF`) turns them on (off) irrespective of "
"whether normal (`NDEBUG`-based) assertions are enabled or not.  A version"
" of LLVM built with ABI breaking checks is not ABI compatible with a "
"version built without it."
msgstr ""

#: ../../CMake.rst:290
msgid "**LLVM_BUILD_32_BITS**:BOOL"
msgstr ""

#: ../../CMake.rst:289
msgid ""
"Build 32-bit executables and libraries on 64-bit systems. This option is "
"available only on some 64-bit Unix systems. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:296
msgid "**LLVM_TARGET_ARCH**:STRING"
msgstr ""

#: ../../CMake.rst:293
msgid ""
"LLVM target to use for native code generation. This is required for JIT "
"generation. It defaults to \"host\", meaning that it shall pick the "
"architecture of the machine where LLVM is being built. If you are cross-"
"compiling, set it to the target architecture name."
msgstr ""

#: ../../CMake.rst:301
msgid "**LLVM_TABLEGEN**:STRING"
msgstr ""

#: ../../CMake.rst:299
msgid ""
"Full path to a native TableGen executable (usually named ``llvm-"
"tblgen``). This is intended for cross-compiling: if the user sets this "
"variable, no native TableGen will be created."
msgstr ""

#: ../../CMake.rst:306
msgid "**LLVM_LIT_ARGS**:STRING"
msgstr ""

#: ../../CMake.rst:304
msgid ""
"Arguments given to lit.  ``make check`` and ``make clang-test`` are "
"affected. By default, ``'-sv --no-progress-bar'`` on Visual C++ and "
"Xcode, ``'-sv'`` on others."
msgstr ""

#: ../../CMake.rst:313
msgid "**LLVM_LIT_TOOLS_DIR**:PATH"
msgstr ""

#: ../../CMake.rst:309
msgid ""
"The path to GnuWin32 tools for tests. Valid on Windows host.  Defaults to"
" the empty string, in which case lit will look for tools needed for tests"
" (e.g. ``grep``, ``sort``, etc.) in your %PATH%. If GnuWin32 is not in "
"your %PATH%, then you can set this variable to the GnuWin32 directory so "
"that lit can find tools needed for tests in that directory."
msgstr ""

#: ../../CMake.rst:321
msgid "**LLVM_ENABLE_FFI**:BOOL"
msgstr ""

#: ../../CMake.rst:316
msgid ""
"Indicates whether the LLVM Interpreter will be linked with the Foreign "
"Function Interface library (libffi) in order to enable calling external "
"functions. If the library or its headers are installed in a custom "
"location, you can also set the variables FFI_INCLUDE_DIR and "
"FFI_LIBRARY_DIR to the directories where ffi.h and libffi.so can be "
"found, respectively. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:329
msgid "**LLVM_EXTERNAL_{CLANG,LLD,POLLY}_SOURCE_DIR**:PATH"
msgstr ""

#: ../../CMake.rst:324
msgid ""
"These variables specify the path to the source directory for the external"
" LLVM projects Clang, lld, and Polly, respectively, relative to the top-"
"level source directory.  If the in-tree subdirectory for an external "
"project exists (e.g., llvm/tools/clang for Clang), then the corresponding"
" variable will not be used.  If the variable for an external project does"
" not point to a valid path, then that project will not be built."
msgstr ""

#: ../../CMake.rst:332
msgid "**LLVM_USE_OPROFILE**:BOOL"
msgstr ""

#: ../../CMake.rst:332
msgid "Enable building OProfile JIT support. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:336
msgid "**LLVM_PROFDATA_FILE**:PATH"
msgstr ""

#: ../../CMake.rst:335
msgid ""
"Path to a profdata file to pass into clang's -fprofile-instr-use flag. "
"This can only be specified if you're building with clang."
msgstr ""

#: ../../CMake.rst:339
msgid "**LLVM_USE_INTEL_JITEVENTS**:BOOL"
msgstr ""

#: ../../CMake.rst:339
msgid "Enable building support for Intel JIT Events API. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:343
msgid "**LLVM_ENABLE_ZLIB**:BOOL"
msgstr ""

#: ../../CMake.rst:342
msgid ""
"Enable building with zlib to support compression/uncompression in LLVM "
"tools. Defaults to ON."
msgstr ""

#: ../../CMake.rst:348
msgid "**LLVM_USE_SANITIZER**:STRING"
msgstr ""

#: ../../CMake.rst:346
msgid ""
"Define the sanitizer used to build LLVM binaries and tests. Possible "
"values are ``Address``, ``Memory``, ``MemoryWithOrigins``, ``Undefined``,"
" ``Thread``, and ``Address;Undefined``. Defaults to empty string."
msgstr ""

#: ../../CMake.rst:351
msgid "**LLVM_PARALLEL_COMPILE_JOBS**:STRING"
msgstr ""

#: ../../CMake.rst:351
msgid "Define the maximum number of concurrent compilation jobs."
msgstr ""

#: ../../CMake.rst:354
msgid "**LLVM_PARALLEL_LINK_JOBS**:STRING"
msgstr ""

#: ../../CMake.rst:354
msgid "Define the maximum number of concurrent link jobs."
msgstr ""

#: ../../CMake.rst:360
msgid "**LLVM_BUILD_DOCS**:BOOL"
msgstr ""

#: ../../CMake.rst:357
msgid ""
"Enables all enabled documentation targets (i.e. Doxgyen and Sphinx "
"targets) to be built as part of the normal build. If the ``install`` "
"target is run then this also enables all built documentation targets to "
"be installed. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:364
msgid "**LLVM_ENABLE_DOXYGEN**:BOOL"
msgstr ""

#: ../../CMake.rst:363
msgid ""
"Enables the generation of browsable HTML documentation using doxygen. "
"Defaults to OFF."
msgstr ""

#: ../../CMake.rst:372
msgid "**LLVM_ENABLE_DOXYGEN_QT_HELP**:BOOL"
msgstr ""

#: ../../CMake.rst:367
msgid ""
"Enables the generation of a Qt Compressed Help file. Defaults to OFF. "
"This affects the make target ``doxygen-llvm``. When enabled, apart from "
"the normal HTML output generated by doxygen, this will produce a QCH file"
" named ``org.llvm.qch``. You can then load this file into Qt Creator. "
"This option is only useful in combination with "
"``-DLLVM_ENABLE_DOXYGEN=ON``; otherwise this has no effect."
msgstr ""

#: ../../CMake.rst:381
msgid "**LLVM_DOXYGEN_QCH_FILENAME**:STRING"
msgstr ""

#: ../../CMake.rst:375
msgid ""
"The filename of the Qt Compressed Help file that will be generated when "
"``-DLLVM_ENABLE_DOXYGEN=ON`` and ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON`` are"
" given. Defaults to ``org.llvm.qch``. This option is only useful in "
"combination with ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has "
"no effect."
msgstr ""

#: ../../CMake.rst:388
msgid "**LLVM_DOXYGEN_QHP_NAMESPACE**:STRING"
msgstr ""

#: ../../CMake.rst:384
msgid ""
"Namespace under which the intermediate Qt Help Project file lives. See "
"`Qt Help Project`_ for more information. Defaults to \"org.llvm\". This "
"option is only useful in combination with "
"``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has no effect."
msgstr ""

#: ../../CMake.rst:397
msgid "**LLVM_DOXYGEN_QHP_CUST_FILTER_NAME**:STRING"
msgstr ""

#: ../../CMake.rst:391
msgid ""
"See `Qt Help Project`_ for more information. Defaults to the CMake "
"variable ``${PACKAGE_STRING}`` which is a combination of the package name"
" and version string. This filter can then be used in Qt Creator to select"
" only documentation from LLVM when browsing through all the help files "
"that you might have loaded. This option is only useful in combination "
"with ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has no effect."
msgstr ""

#: ../../CMake.rst:405
msgid "**LLVM_DOXYGEN_QHELPGENERATOR_PATH**:STRING"
msgstr ""

#: ../../CMake.rst:402
msgid ""
"The path to the ``qhelpgenerator`` executable. Defaults to whatever "
"CMake's ``find_program()`` can find. This option is only useful in "
"combination with ``-DLLVM_ENABLE_DOXYGEN_QT_HELP=ON``; otherwise it has "
"no effect."
msgstr ""

#: ../../CMake.rst:409
msgid "**LLVM_DOXYGEN_SVG**:BOOL"
msgstr ""

#: ../../CMake.rst:408
msgid ""
"Uses .svg files instead of .png files for graphs in the Doxygen output. "
"Defaults to OFF."
msgstr ""

#: ../../CMake.rst:414
msgid "**LLVM_ENABLE_SPHINX**:BOOL"
msgstr ""

#: ../../CMake.rst:412
msgid ""
"If enabled CMake will search for the ``sphinx-build`` executable and will"
" make the ``SPHINX_OUTPUT_HTML`` and ``SPHINX_OUTPUT_MAN`` CMake options "
"available. Defaults to OFF."
msgstr ""

#: ../../CMake.rst:417
msgid "**SPHINX_EXECUTABLE**:STRING"
msgstr ""

#: ../../CMake.rst:417
msgid "The path to the ``sphinx-build`` executable detected by CMake."
msgstr ""

#: ../../CMake.rst:424
msgid "**SPHINX_OUTPUT_HTML**:BOOL"
msgstr ""

#: ../../CMake.rst:420
msgid ""
"If enabled (and ``LLVM_ENABLE_SPHINX`` is enabled) then the targets for "
"building the documentation as html are added (but not built by default "
"unless ``LLVM_BUILD_DOCS`` is enabled). There is a target for each "
"project in the source tree that uses sphinx (e.g.  ``docs-llvm-html``, "
"``docs-clang-html`` and ``docs-lld-html``). Defaults to ON."
msgstr ""

#: ../../CMake.rst:430
msgid "**SPHINX_OUTPUT_MAN**:BOOL"
msgstr ""

#: ../../CMake.rst:427
msgid ""
"If enabled (and ``LLVM_ENABLE_SPHINX`` is enabled) the targets for "
"building the man pages are added (but not built by default unless "
"``LLVM_BUILD_DOCS`` is enabled). Currently the only target added is "
"``docs-llvm-man``. Defaults to ON."
msgstr ""

#: ../../CMake.rst:434
msgid "**SPHINX_WARNINGS_AS_ERRORS**:BOOL"
msgstr ""

#: ../../CMake.rst:433
msgid ""
"If enabled then sphinx documentation warnings will be treated as errors. "
"Defaults to ON."
msgstr ""

#: ../../CMake.rst:440
msgid "**LLVM_CREATE_XCODE_TOOLCHAIN**:BOOL"
msgstr ""

#: ../../CMake.rst:437
msgid ""
"OS X Only: If enabled CMake will generate a target named 'install-xcode-"
"toolchain'. This target will create a directory at "
"$CMAKE_INSTALL_PREFIX/Toolchains containing an xctoolchain directory "
"which can be used to override the default system tools."
msgstr ""

#: ../../CMake.rst:449
msgid "**LLVM_BUILD_LLVM_DYLIB**:BOOL"
msgstr ""

#: ../../CMake.rst:443
msgid ""
"If enabled, the target for building the libLLVM shared library is added. "
"This library contains all of LLVM's components in a single shared "
"library. Defaults to OFF. This cannot be used in conjunction with "
"BUILD_SHARED_LIBS. Tools will only be linked to the libLLVM shared "
"library if LLVM_LINK_LLVM_DYLIB is also ON. The components in the library"
" can be customised by setting LLVM_DYLIB_COMPONENTS to a list of the "
"desired components."
msgstr ""

#: ../../CMake.rst:454
msgid "**LLVM_LINK_LLVM_DYLIB**:BOOL"
msgstr ""

#: ../../CMake.rst:452
msgid ""
"If enabled, tools will be linked with the libLLVM shared library. "
"Defaults to OFF. Setting LLVM_LINK_LLVM_DYLIB to ON also sets "
"LLVM_BUILD_LLVM_DYLIB to ON."
msgstr ""

#: ../../CMake.rst:464
msgid "**BUILD_SHARED_LIBS**:BOOL"
msgstr ""

#: ../../CMake.rst:457
msgid ""
"Flag indicating if each LLVM component (e.g. Support) is built as a "
"shared library (ON) or as a static library (OFF). Its default value is "
"OFF. On Windows, shared libraries may be used when building with MinGW, "
"including mingw-w64, but not when building with the Microsoft toolchain."
msgstr ""

#: ../../CMake.rst:462
msgid ""
"BUILD_SHARED_LIBS is only recommended for use by LLVM developers. If you "
"want to build LLVM as a shared library, you should use the "
"``LLVM_BUILD_LLVM_DYLIB`` option."
msgstr ""

#: ../../CMake.rst:467
msgid "Executing the test suite"
msgstr "运行测试套件"

#: ../../CMake.rst:469
msgid ""
"Testing is performed when the *check-all* target is built. For instance, "
"if you are using Makefiles, execute this command in the root of your "
"build directory:"
msgstr ""

#: ../../CMake.rst:476
msgid ""
"On Visual Studio, you may run tests by building the project \"check-"
"all\". For more information about testing, see the :doc:`TestingGuide`."
msgstr ""

#: ../../CMake.rst:480
msgid "Cross compiling"
msgstr ""

#: ../../CMake.rst:482
msgid ""
"See `this wiki page <http://www.vtk.org/Wiki/CMake_Cross_Compiling>`_ for"
" generic instructions on how to cross-compile with CMake. It goes into "
"detailed explanations and may seem daunting, but it is not. On the wiki "
"page there are several examples including toolchain files. Go directly to"
" `this section "
"<http://www.vtk.org/Wiki/CMake_Cross_Compiling#Information_how_to_set_up_various_cross_compiling_toolchains>`_"
" for a quick solution."
msgstr ""

#: ../../CMake.rst:489
msgid ""
"Also see the `LLVM-specific variables`_ section for variables used when "
"cross-compiling."
msgstr ""

#: ../../CMake.rst:493
msgid "Embedding LLVM in your project"
msgstr "在您的项目中嵌入LLVM"

#: ../../CMake.rst:495
msgid ""
"From LLVM 3.5 onwards both the CMake and autoconf/Makefile build systems "
"export LLVM libraries as importable CMake targets. This means that "
"clients of LLVM can now reliably use CMake to develop their own LLVM-"
"based projects against an installed version of LLVM regardless of how it "
"was built."
msgstr ""
"从LLVM3.5版开始，CMake和autoconf/Makefile构建系统，都支持讲LLVM库作为一个子项目导入到其他CMake项目中。"
"这意味着LLVM的用户们可以用直接使用CMake来开发自己的基于LLVM的项目，而无需再关心怎么安装适合的LLVM版本的问题。"


#: ../../CMake.rst:500
msgid ""
"Here is a simple example of a CMakeLists.txt file that imports the LLVM "
"libraries and uses them to build a simple application ``simple-tool``."
msgstr ""
"这里有个简单的CMakeLists.txt文件实例，是关于导入LLVM库和如何使用LLVM库构建一个简单的小工具 ``simple-tool`` 。"

#: ../../CMake.rst:531
msgid ""
"The ``find_package(...)`` directive when used in CONFIG mode (as in the "
"above example) will look for the ``LLVMConfig.cmake`` file in various "
"locations (see cmake manual for details).  It creates a ``LLVM_DIR`` "
"cache entry to save the directory where ``LLVMConfig.cmake`` is found or "
"allows the user to specify the directory (e.g. by passing "
"``-DLLVM_DIR=/usr/share/llvm/cmake`` to the ``cmake`` command or by "
"setting it directly in ``ccmake`` or ``cmake-gui``)."
msgstr ""
"find_package(...) 这条语句在CONFIG模式下（如上面例子中用到的），将会在几个目录下搜索 ``LLVMConfig.cmake`` 这个配置文件（详情请查看CMake文档）。"
"它会创建一个 ``LLVM_DIR`` 缓存项来存储 ``LLVMConfig.cmake`` 所在的目录，或者您可以重写这个变量来制定另外一个LLVM库的安装目录"
"（例如，向 ``cmake`` 传入此参数 ``-DLLVM_DIR=/usr/share/llvm/cmake`` 或者直接在GUI中设定，使用 ``ccmake`` 或 ``cmake-gui`` ）。"

#: ../../CMake.rst:538
msgid "This file is available in two different locations."
msgstr "这个文件在以下两个不同目录下均可用。"

#: ../../CMake.rst:540
msgid ""
"``<INSTALL_PREFIX>/share/llvm/cmake/LLVMConfig.cmake`` where "
"``<INSTALL_PREFIX>`` is the install prefix of an installed version of "
"LLVM. On Linux typically this is "
"``/usr/share/llvm/cmake/LLVMConfig.cmake``."
msgstr ""

#: ../../CMake.rst:544
msgid ""
"``<LLVM_BUILD_ROOT>/share/llvm/cmake/LLVMConfig.cmake`` where "
"``<LLVM_BUILD_ROOT>`` is the root of the LLVM build tree. **Note: this is"
" only available when building LLVM with CMake.**"
msgstr ""

#: ../../CMake.rst:548
msgid ""
"If LLVM is installed in your operating system's normal installation "
"prefix (e.g. on Linux this is usually ``/usr/``) ``find_package(LLVM "
"...)`` will automatically find LLVM if it is installed correctly. If LLVM"
" is not installed or you wish to build directly against the LLVM build "
"tree you can use ``LLVM_DIR`` as previously mentioned."
msgstr ""
"如果LLVM被安装在了您系统的默认路径下 （如Linux在 ``/usr/`` 下）且被正确安装， ``find_package(LLVM ...)`` 将会自动为您找到 LLVM。"
"如果LLVM没有安装或者您希望直接使用另一个构建好的LLVM库而无需安装，如同刚才提到过的那样，您可以设置 ``LLVM_DIR`` 来指定LLVM库的安装目录。"


#: ../../CMake.rst:554
msgid ""
"The ``LLVMConfig.cmake`` file sets various useful variables. Notable "
"variables include"
msgstr ""
"``LLVMConfig.cmake`` 配置文件设定了一系列非常有用的CMake变量。值得注意的变量有："


#: ../../CMake.rst:559
msgid "``LLVM_CMAKE_DIR``"
msgstr ""

#: ../../CMake.rst:558
msgid ""
"The path to the LLVM CMake directory (i.e. the directory containing "
"LLVMConfig.cmake)."
msgstr "LLVM 的 CMake 目录 （包含 LLVMConfig.cmake 的那个目录）"

#: ../../CMake.rst:562
msgid "``LLVM_DEFINITIONS``"
msgstr ""

#: ../../CMake.rst:562
msgid ""
"A list of preprocessor defines that should be used when building against "
"LLVM."
msgstr "一系列构建中要用到的预处理器"

#: ../../CMake.rst:565
msgid "``LLVM_ENABLE_ASSERTIONS``"
msgstr ""

#: ../../CMake.rst:565
msgid "This is set to ON if LLVM was built with assertions, otherwise OFF."
msgstr "如果想构建时启用断言，那么将其设定为ON，否则设为OFF"

#: ../../CMake.rst:569
msgid "``LLVM_ENABLE_EH``"
msgstr ""

#: ../../CMake.rst:568
msgid ""
"This is set to ON if LLVM was built with exception handling (EH) enabled,"
" otherwise OFF."
msgstr "是否开启异常处理，设定为ON则开启，否则设为OFF"

#: ../../CMake.rst:573
msgid "``LLVM_ENABLE_RTTI``"
msgstr ""

#: ../../CMake.rst:572
msgid ""
"This is set to ON if LLVM was built with run time type information "
"(RTTI), otherwise OFF."
msgstr "启用RTTI支持（run time type information 运行时类型信息）时设定为ON，否则设为OFF"

#: ../../CMake.rst:576
msgid "``LLVM_INCLUDE_DIRS``"
msgstr ""

#: ../../CMake.rst:576
msgid "A list of include paths to directories containing LLVM header files."
msgstr "一系列include目录，包含有所有LLVM的头文件。"

#: ../../CMake.rst:580
msgid "``LLVM_PACKAGE_VERSION``"
msgstr ""

#: ../../CMake.rst:579
msgid ""
"The LLVM version. This string can be used with CMake conditionals, e.g., "
"``if (${LLVM_PACKAGE_VERSION} VERSION_LESS \"3.5\")``."
msgstr "LLVM的版本信息，这个可以被用于CMake条件语句（例如：``if (${LLVM_PACKAGE_VERSION} VERSION_LESS \"3.5\")``）。"

#: ../../CMake.rst:583
msgid "``LLVM_TOOLS_BINARY_DIR``"
msgstr ""

#: ../../CMake.rst:583
msgid "The path to the directory containing the LLVM tools (e.g. ``llvm-as``)."
msgstr "这个路径中包含了LLVM的二进制工具链（例如 ``llvm-as``等）。"

#: ../../CMake.rst:585
msgid ""
"Notice that in the above example we link ``simple-tool`` against several "
"LLVM libraries. The list of libraries is determined by using the "
"``llvm_map_components_to_libnames()`` CMake function. For a list of "
"available components look at the output of running ``llvm-config "
"--components``."
msgstr ""
"需要注意的一点是，在上面的代码示例中，我们链接 ``simple-tool`` 时用到了几个LLVM库。这几个库的名称查找是通过 ``llvm_map_components_to_libnames()`` 这一CMake函数"
"实现的。想了解全部可用的组件名，可用通过运行命令 ``llvm-config --components``进行查看。"

#: ../../CMake.rst:590
msgid ""
"Note that for LLVM < 3.5 ``llvm_map_components_to_libraries()`` was used "
"instead of ``llvm_map_components_to_libnames()``. This is now deprecated "
"and will be removed in a future version of LLVM."
msgstr ""
"提醒一点，如果您使用 LLVM < 3.5 等版本，``llvm_map_components_to_libraries()`` 是 ``llvm_map_components_to_libnames()`` 的原名，"
"目前该函数名已经过时并且将会在新的版本中被移除。"

#: ../../CMake.rst:597
msgid "Developing LLVM passes out of source"
msgstr "在源码目录外开发LLVM pass"

#: ../../CMake.rst:599
msgid ""
"It is possible to develop LLVM passes out of LLVM's source tree (i.e. "
"against an installed or built LLVM). An example of a project layout is "
"provided below."
msgstr ""
"在LLVM源码目录外开发LLVM pass也是可行的（例如：通过一个已安装的或已编译的LLVM库）。下面展示了一个示例项目的结构："

#: ../../CMake.rst:613
msgid "Contents of ``<project dir>/CMakeLists.txt``:"
msgstr "``<project dir>/CMakeLists.txt`` 的内容："

#: ../../CMake.rst:624
msgid "Contents of ``<project dir>/<pass name>/CMakeLists.txt``:"
msgstr "``<project dir>/<pass name>/CMakeLists.txt`` 的内容："

#: ../../CMake.rst:630
msgid ""
"Note if you intend for this pass to be merged into the LLVM source tree "
"at some point in the future it might make more sense to use LLVM's "
"internal ``add_llvm_loadable_module`` function instead by..."
msgstr ""

#: ../../CMake.rst:635
msgid ""
"Adding the following to ``<project dir>/CMakeLists.txt`` (after "
"``find_package(LLVM ...)``)"
msgstr ""

#: ../../CMake.rst:643
msgid "And then changing ``<project dir>/<pass name>/CMakeLists.txt`` to"
msgstr ""

#: ../../CMake.rst:651
msgid ""
"When you are done developing your pass, you may wish to integrate it into"
" the LLVM source tree. You can achieve it in two easy steps:"
msgstr ""

#: ../../CMake.rst:654
msgid ""
"Copying ``<pass name>`` folder into ``<LLVM root>/lib/Transform`` "
"directory."
msgstr ""

#: ../../CMake.rst:656
msgid ""
"Adding ``add_subdirectory(<pass name>)`` line into ``<LLVM "
"root>/lib/Transform/CMakeLists.txt``."
msgstr ""

#: ../../CMake.rst:660
msgid "Compiler/Platform-specific topics"
msgstr ""

#: ../../CMake.rst:662
msgid "Notes for specific compilers and/or platforms."
msgstr ""

#: ../../CMake.rst:665
msgid "Microsoft Visual C++"
msgstr ""

#: ../../CMake.rst:669
msgid "**LLVM_COMPILER_JOBS**:STRING"
msgstr ""

#: ../../CMake.rst:668
msgid ""
"Specifies the maximum number of parallel compiler jobs to use per project"
" when building with msbuild or Visual Studio. Only supported for the "
"Visual Studio 2010 CMake generator. 0 means use all processors. Default "
"is 0."
msgstr ""

